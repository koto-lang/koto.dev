# An example of how to make enum-like maps in Koto

# Make an enum by inserting a name/index entry into a map for each enum variant
make_enum = |entries...|
  entries
    .enumerate()
    # Swap the index and name
    .each |(index, name)| name, index
    # The to_map iterator consumer builds a map out of the name/index tuples
    .to_map()

# Make a bidirectional enum by inserting:
#   1. a name/index entry into a map for each enum variant
#   2. a corresponding index/name entry
make_bidirectional_enum = |entries...|
  enum = {}
  for index, name in entries.enumerate()
    enum.insert name, index
    enum.insert index, name
  enum

@main = ||
  fruit = make_enum 'apple', 'banana', 'orange'
  for i in 0..4
    match i
      fruit.apple then print 'Apple!'
      fruit.banana then print 'Banana!'
      fruit.orange then print 'Orange!'
      else print '???'

@test make_enum = ||
  color = make_enum 'red', 'green', 'blue'
  assert_eq color.red, 0
  assert_eq color.green, 1
  assert_eq color.blue, 2
  assert_eq color.get_index(0)[0], 'red'
  assert_eq color.get_index(1)[0], 'green'
  assert_eq color.get_index(2)[0], 'blue'

@test make_bidirectional_enum = ||
  cutlery = make_bidirectional_enum 'fork', 'knife', 'spoon'
  assert_eq cutlery.fork, 0
  assert_eq cutlery.knife, 1
  assert_eq cutlery.spoon, 2
  assert_eq cutlery.get(0), 'fork'
  assert_eq cutlery.get(1), 'knife'
  assert_eq cutlery.get(2), 'spoon'
