[{"title":"Language Basics","module":"Language Guide","url":"/docs/0.16/language/#language-basics","contents":"Koto programs contain a series of expressions that are evaluated in top-to-bottom order by Koto's runtime. As an example, this simple script prints a friendly greeting.","keywords":[]},{"title":"Comments","module":"Language Guide","url":"/docs/0.16/language/#comments","contents":"Single-line comments start with a #. Multi-line comments start with #- and end with -#.","keywords":[]},{"title":"Numbers and Arithmetic","module":"Language Guide","url":"/docs/0.16/language/#numbers-and-arithmetic","contents":"Numbers and arithmetic are expressed in a familiar way. Underscores can be used as separators to aid readability in long numbers.","keywords":[]},{"title":"Parentheses","module":"Language Guide","url":"/docs/0.16/language/#parentheses","contents":"Arithmetic operations follow the conventional order of precedence. Parentheses can be used to group expressions as needed.","keywords":[]},{"title":"Non-decimal Numbers","module":"Language Guide","url":"/docs/0.16/language/#non-decimal-numbers","contents":"Numbers can be expressed with non-decimal bases.","keywords":[]},{"title":"Booleans","module":"Language Guide","url":"/docs/0.16/language/#booleans","contents":"Booleans are declared with the true and false keywords, and combined using the and and or operators. Booleans can be negated with the not operator. Values can be compared for equality with the == and != operators.","keywords":[]},{"title":"Null","module":"Language Guide","url":"/docs/0.16/language/#null","contents":"The null keyword is used to declare a value of type Null, which indicates the absence of a value.","keywords":[]},{"title":"Truthiness","module":"Language Guide","url":"/docs/0.16/language/#truthiness","contents":"In boolean contexts (such as logical operations), null is treated as being equivalent to false. Every other value in Koto evaluates as true.","keywords":[]},{"title":"Assigning Variables","module":"Language Guide","url":"/docs/0.16/language/#assigning-variables","contents":"Values are assigned to named identifiers with =, and can be freely reassigned. Named values like this are known as variables. The result of an assignment is the value that's being assigned, so chained assignments are possible. Compound assignment operators are also available. For example, x *= y is a simpler way of writing x = x * y.","keywords":["variables"]},{"title":"Debug","module":"Language Guide","url":"/docs/0.16/language/#debug","contents":"The debug keyword allows you to quickly display a value while working on a program. It prints the result of an expression, prefixed with its line number and the original expression as a string. When using debug, the displayed value is also the result of the expression, which can be useful if you want to quickly get feedback during development.","keywords":[]},{"title":"Semicolons","module":"Language Guide","url":"/docs/0.16/language/#semicolons","contents":"Expressions are typically placed on separate lines, but if necessary they can be separated with semicolons.","keywords":[]},{"title":"Lists","module":"Language Guide","url":"/docs/0.16/language/#lists","contents":"Lists in Koto are created with [] square brackets and can contain a mix of different value types. Access list elements by index using square brackets, starting from 0. Once a list has been created, its underlying data is shared between other instances of the same list. Changes to one instance of the list are reflected in the other. If no value is given between commas then null is added to the list at that position.","keywords":["index"]},{"title":"Joining Lists","module":"Language Guide","url":"/docs/0.16/language/#joining-lists","contents":"The + operator allows lists to be joined together, creating a new list that contains their concatenated elements.","keywords":[]},{"title":"Tuples","module":"Language Guide","url":"/docs/0.16/language/#tuples","contents":"Tuples in Koto are similar to lists, but are designed for sequences of values that have a fixed structure. Unlike lists, tuples can't be resized after creation, and values that are contained in the tuple can't be replaced. Tuples are declared with a series of expressions separated by commas. Parentheses can be used for grouping to avoid ambiguity. You can access tuple elements by index using square brackets, starting from 0. If no value is given between commas then null is added to the tuple at that position.","keywords":[]},{"title":"Empty and Single Element Tuples","module":"Language Guide","url":"/docs/0.16/language/#empty-and-single-element-tuples","contents":"An empty tuple (a tuple that contains zero elements) is created using empty parentheses. A tuple that contains a single element can be created by including a trailing comma.","keywords":[]},{"title":"Joining Tuples","module":"Language Guide","url":"/docs/0.16/language/#joining-tuples","contents":"The + operator allows tuples to be joined together, creating a new tuple containing their concatenated elements.","keywords":[]},{"title":"Tuple Mutability","module":"Language Guide","url":"/docs/0.16/language/#tuple-mutability","contents":"While tuples have a fixed structure and its contained values can't be replaced, mutable value types (like lists) can be modified while they're contained in tuples.","keywords":["mutable"]},{"title":"Strings","module":"Language Guide","url":"/docs/0.16/language/#strings","contents":"Strings in Koto contain a sequence of UTF-8 encoded characters, and can be declared using ' or \" quotes. Strings can start on one line and finish on another. Strings can be joined together with the + operator.","keywords":[]},{"title":"String Interpolation","module":"Language Guide","url":"/docs/0.16/language/#string-interpolation","contents":"Variables can be easily included in a string by surrounding them with {} curly braces. Including variables in a string this way is known as string interpolation. Simple expressions can also be interpolated using the same syntax.","keywords":["string interpolation"]},{"title":"String Escape Codes","module":"Language Guide","url":"/docs/0.16/language/#string-escape-codes","contents":"Strings can contain the following escape codes to define special characters, all of which start with a \\.\\n: Newline\\r: Carriage Return\\t: Tab\\': Single quote\\\": Double quote\\\\: Backslash\\{: Interpolation start\\u{NNNNNN}: Unicode characterUp to 6 hexadecimal digits can be included within the {} braces. The maximum value is \\u{10ffff}.\\xNN: ASCII characterExactly 2 hexadecimal digits follow the \\x.","keywords":[]},{"title":"Continuing a Long Line","module":"Language Guide","url":"/docs/0.16/language/#continuing-a-long-line","contents":"The end of a line can be escaped with a \\, which will skip the newline and any leading whitespace on the next line.","keywords":[]},{"title":"String Indexing","module":"Language Guide","url":"/docs/0.16/language/#string-indexing","contents":"Individual bytes of a string can be accessed via indexing with [] braces. Care must be taken when using indexing with strings that could contain non-ASCII data. If the indexed bytes would produce invalid UTF-8 data then an error will be thrown. To access a string's Unicode characters individually, see string.chars.","keywords":["bytes"]},{"title":"Single or Double Quotes","module":"Language Guide","url":"/docs/0.16/language/#single-or-double-quotes","contents":"Both single ' and double \" quotes are valid for defining strings in Koto and have the same meaning. A practical reason to choose one over the other is that the alternate quote type can be used in a string without needing to use escape characters.","keywords":[]},{"title":"Raw Strings","module":"Language Guide","url":"/docs/0.16/language/#raw-strings","contents":"When a string contains a lot of special characters, it can be preferable to use a raw string. Raw strings ignore escape characters and interpolated expressions, providing the raw contents of the string between its delimiters. Raw strings use single or double quotes as the delimiter, prefixed with an r. For more complex string contents, the delimiter can be extended using up to 255 # characters after the r prefix,","keywords":["raw string","delimiters"]},{"title":"Functions","module":"Language Guide","url":"/docs/0.16/language/#functions","contents":"Functions in Koto are created using a pair of vertical bars (||), with the function's arguments listed between the bars. The body of the function follows the vertical bars. Functions are called with arguments contained in () parentheses. The body of the function is evaluated and the result is returned to the caller. A function's body can be an indented block, where the last expression in the body is evaluated as the function's result.","keywords":["arguments","body","called"]},{"title":"Optional Call Parentheses","module":"Language Guide","url":"/docs/0.16/language/#optional-call-parentheses","contents":"In simple expressions, the parentheses for function call arguments are optional and can be omitted.","keywords":[]},{"title":"Return","module":"Language Guide","url":"/docs/0.16/language/#return","contents":"When the function should be exited early, the return keyword can be used. If a value isn't provided to return, then the returned value is null.","keywords":[]},{"title":"Function Piping","module":"Language Guide","url":"/docs/0.16/language/#function-piping","contents":"The arrow operator (->) can be used to pass the result of one function to another, working from left to right. This is known as function piping, and can aid readability when working with a long chain of function calls. Piped arguments are inserted as the first argument for the following call.","keywords":["function piping"]},{"title":"Maps","module":"Language Guide","url":"/docs/0.16/language/#maps","contents":"Maps in Koto are associative containers that contain a series of entries with keys that correspond to associated values. Maps can be created using inline syntax, with {} braces containing a series of entries separated by commas. The . operator returns the value associated with a particular key. Maps can also be created using block syntax, with each entry on a new indented line: Once a map has been created, its underlying data is shared between other instances of the same map. Changes to one instance are reflected in the other.","keywords":["block syntax","keys","inline syntax","entries"]},{"title":"Entry Order","module":"Language Guide","url":"/docs/0.16/language/#entry-order","contents":"A map's entries are maintained in a consistent order, representing the sequence in which its entries were added. You can access map entries by index using square brackets, starting from 0. The entry is returned as a tuple containing the key and its associated value. Entries can also be replaced by assigning a key/value tuple to the entry's index.","keywords":[]},{"title":"Shorthand Values","module":"Language Guide","url":"/docs/0.16/language/#shorthand-values","contents":"When creating maps with inline syntax, Koto supports a shorthand notation that simplifies adding existing values to the map. If a value isn't provided for a key, then Koto will look for a value that matches the key's name, and if one is found then it will be used as that entry's value.","keywords":[]},{"title":"Maps and Self","module":"Language Guide","url":"/docs/0.16/language/#maps-and-self","contents":"Maps can store any type of value, including functions, which provides a convenient way to group functions together. self is a special identifier that refers to the instance of the container in which the function is contained. In maps, self allows functions to access and modify data from the map, enabling object-like behaviour.","keywords":["object"]},{"title":"Joining Maps","module":"Language Guide","url":"/docs/0.16/language/#joining-maps","contents":"The + operator allows maps to be joined together, creating a new map that combines their entries.","keywords":[]},{"title":"Quoted Map Keys","module":"Language Guide","url":"/docs/0.16/language/#quoted-map-keys","contents":"Map keys are usually defined and accessed without quotes, but they are stored in the map as strings. Quotes can be used if a key needs to be defined that would be otherwise be disallowed by Koto syntax rules (e.g. a keyword, or using characters that aren't allowed in an identifier). Quoted keys also allow key names to be generated dynamically by using string interpolation.","keywords":[]},{"title":"Map Key Types","module":"Language Guide","url":"/docs/0.16/language/#map-key-types","contents":"Map keys are typically strings, but any immutable value can be used as a map key by using the map.insert and map.get functions. The immutable value types in Koto are strings, numbers, booleans, ranges, and null. Tuples are also considered to be immutable when their contained elements are all immutable.","keywords":["immutable"]},{"title":"Core Library","module":"Language Guide","url":"/docs/0.16/language/#core-library","contents":"The Core Library provides a collection of fundamental functions and values for working with the Koto language, organized within modules. Koto's built-in value types automatically have access to their corresponding core library modules via . access. The documentation for the Core library (along with this guide) is also available in the help command of the Koto CLI.","keywords":["modules","Core Library"]},{"title":"Prelude","module":"Language Guide","url":"/docs/0.16/language/#prelude","contents":"Koto's prelude is a collection of items that are automatically made available in a Koto script without the need for first calling import. The core library's modules are all included by default in the prelude, along with the following functions:io.printkoto.copykoto.sizekoto.typetest.asserttest.assert_eqtest.assert_netest.assert_near","keywords":["prelude"]},{"title":"Conditional Expressions","module":"Language Guide","url":"/docs/0.16/language/#conditional-expressions","contents":"Koto includes several ways of producing values that depend on conditions.","keywords":["conditions"]},{"title":"if","module":"Language Guide","url":"/docs/0.16/language/#if","contents":"if expressions come in two flavors; single-line: ...And multi-line using indented blocks: The result of an if expression is the final expression in the branch that gets executed.","keywords":[]},{"title":"switch","module":"Language Guide","url":"/docs/0.16/language/#switch","contents":"switch expressions can be used as a cleaner alternative to if/else if/else cascades.","keywords":[]},{"title":"match","module":"Language Guide","url":"/docs/0.16/language/#match","contents":"match expressions can be used to match a value against a series of patterns, with the matched pattern causing a specific branch of code to be executed. Patterns can be literals or identifiers. An identifier will match any value, so they're often used with if conditions to refine the match. Ignored values (any identifier starting with _) match against any value, and else can be used for fallback branches. List and tuple entries can be matched against by using parentheses, with ... available for capturing the rest of the sequence.","keywords":[]},{"title":"Optional Chaining","module":"Language Guide","url":"/docs/0.16/language/#optional-chaining","contents":"Checking optional values for null in expression chains can feel a bit cumbersome, with if checks interrupting an expression's natural flow. The ? operator can be used to simplify expression chains that contain optional results. If ? finds null when checking an optional value, then the chain gets short-circuited with null given as the chain's overall result. Multiple ? checks can be performed in an expression chain:","keywords":["short-circuited"]},{"title":"Loops","module":"Language Guide","url":"/docs/0.16/language/#loops","contents":"Koto includes several ways of evaluating expressions repeatedly in a loop.","keywords":[]},{"title":"for","module":"Language Guide","url":"/docs/0.16/language/#for","contents":"for loops are repeated for each element in a sequence, such as a list or tuple.","keywords":[]},{"title":"while","module":"Language Guide","url":"/docs/0.16/language/#while","contents":"while loops continue to repeat while a condition is true.","keywords":["while"]},{"title":"until","module":"Language Guide","url":"/docs/0.16/language/#until","contents":"until loops continue to repeat until a condition is true.","keywords":["until"]},{"title":"continue","module":"Language Guide","url":"/docs/0.16/language/#continue","contents":"The continue keyword skips the remaining part of a loop's body and proceeds with the next repetition of the loop.","keywords":[]},{"title":"break","module":"Language Guide","url":"/docs/0.16/language/#break","contents":"Loops can be terminated with the break keyword. A value can be provided to break, which is then used as the result of the loop.","keywords":[]},{"title":"loop","module":"Language Guide","url":"/docs/0.16/language/#loop","contents":"loop creates a loop that will repeat indefinitely.","keywords":[]},{"title":"Iterators","module":"Language Guide","url":"/docs/0.16/language/#iterators","contents":"The elements of a sequence can be accessed sequentially with an iterator, created using the .iter() function. An iterator yields values via .next() until the end of the sequence is reached, when null is returned.","keywords":["iterator"]},{"title":"Iterator Generators","module":"Language Guide","url":"/docs/0.16/language/#iterator-generators","contents":"The iterator module contains iterator generators like once and repeat that generate output values lazily during iteration.","keywords":["generators","lazily"]},{"title":"Iterator Adaptors","module":"Language Guide","url":"/docs/0.16/language/#iterator-adaptors","contents":"The output of an iterator can be modified using adaptors from the iterator module. The iterator module is available to any value which is declared to be iterable (which includes Koto's containers like lists and strings), so it's not necessary to call .iter() before using an adaptor.","keywords":["adaptors","iterable"]},{"title":"Using iterators with for","module":"Language Guide","url":"/docs/0.16/language/#using-iterators-with-for","contents":"for loops accept any iterable value as input, including adapted iterators.","keywords":[]},{"title":"Iterator Chains","module":"Language Guide","url":"/docs/0.16/language/#iterator-chains","contents":"Any iterator can be passed into an adaptor, including other adaptors, creating iterator chains that act as data processing pipelines.","keywords":["iterator chains"]},{"title":"Iterator Consumers","module":"Language Guide","url":"/docs/0.16/language/#iterator-consumers","contents":"Iterators can also be consumed using functions like .to_list() and .to_tuple(), allowing the output of an iterator to be easily captured in a container. Iterator consumers are also available for creating strings and maps, as well as operations like counting the number of values yielded from an iterator, or getting the total sum of an iterator's output.","keywords":["consumed"]},{"title":"Value Unpacking","module":"Language Guide","url":"/docs/0.16/language/#value-unpacking","contents":"Multiple assignments can be performed in a single expression by separating the variable names with commas. If there's a single value being assigned, and the value is iterable, then it gets unpacked into the target variables. Unpacking works with any iterable value, including adapted iterators. If the value being unpacked doesn't contain enough values for the assignment, then null is assigned to any remaining variables. Unpacking can also be used in for loops, which is particularly useful when looping over the contents of a map.","keywords":["unpacked"]},{"title":"Ignoring Unpacked Values","module":"Language Guide","url":"/docs/0.16/language/#ignoring-unpacked-values","contents":"_ can be used as a placeholder for unpacked values that aren't needed elsewhere in the code and can therefore be ignored. If you would like to add a name to the ignored value as a reminder, then the name can be appended to _. Ignored values (any variables starting with _) can be written to, but can't be accessed.","keywords":[]},{"title":"Ranges","module":"Language Guide","url":"/docs/0.16/language/#ranges","contents":"Ranges of integers can be created with .. or ..=. .. creates a non-inclusive range, which defines a range up to but not including the end of the range. ..= creates an inclusive range, which includes the end of the range. If a value is missing from either side of the range operator then an unbounded range is created. Ranges that have a defined start can be indexed using square brackets. Bounded ranges are declared as iterable, so they can be used in for loops and with the iterator module.","keywords":["unbounded","Bounded","not including","non-inclusive","inclusive"]},{"title":"Slices","module":"Language Guide","url":"/docs/0.16/language/#slices","contents":"Ranges can be used to create a slice of a container's data. For immutable containers like tuples and strings, slices share the original value's data, with no copies being made. For mutable containers like lists, creating a slice makes a copy of the sliced portion of the underlying data. When creating a slice with an unbounded range, if the start of the range if omitted then the slice starts from the beginning of the container. If the end of the range is omitted, then the slice includes all remaining elements in the container.","keywords":["slice"]},{"title":"Type Checks","module":"Language Guide","url":"/docs/0.16/language/#type-checks","contents":"Koto is a primarily a dynamically typed language, however in more complex programs you might find it beneficial to add type checks. These checks can help in catching errors earlier, and can also act as documentation for the reader. One way to add type checks to your program is to use the type function, which returns a value's type as a string. Checking types this way is rather verbose, so Koto offers type hints as a more ergonomic alternative.","keywords":["type hints","type checks"]},{"title":"let","module":"Language Guide","url":"/docs/0.16/language/#let","contents":"You can declare variables with type hints using a let expression. If a value is assigned that doesn't match the declared type then an error will be thrown.","keywords":[]},{"title":"for arguments","module":"Language Guide","url":"/docs/0.16/language/#for-arguments","contents":"Type hints can also be added to for loop arguments. The type will be checked on each iteration of the loop.","keywords":[]},{"title":"Functions","module":"Language Guide","url":"/docs/0.16/language/#functions","contents":"Function arguments can also be given type hints, and the type of the return value can be checked with the -> operator.","keywords":[]},{"title":"match patterns","module":"Language Guide","url":"/docs/0.16/language/#match-patterns","contents":"Type hints can be used in match patterns to check the type of the a value. Rather than throwing an error, if a type check fails then the next match pattern will be attempted.","keywords":[]},{"title":"Optional Values","module":"Language Guide","url":"/docs/0.16/language/#optional-values","contents":"Sometimes a value can either be of a particular type, or otherwise it should null. These kinds of values are referred to as optional, and are useful for functions or expressions that return either a valid value, or nothing at all. Optional value types are expressed by appending ? to the type hint.","keywords":["optional"]},{"title":"Any","module":"Language Guide","url":"/docs/0.16/language/#any","contents":"The Any type hint will result in a successful check with any value.","keywords":[]},{"title":"Callable","module":"Language Guide","url":"/docs/0.16/language/#callable","contents":"The Callable type hint will accept functions, or any object that can behave like a function.","keywords":[]},{"title":"Indexable","module":"Language Guide","url":"/docs/0.16/language/#indexable","contents":"The Indexable type hint will accept any value that supports [] indexing.","keywords":[]},{"title":"Iterable","module":"Language Guide","url":"/docs/0.16/language/#iterable","contents":"The Iterable type hint is useful when any iterable value can be accepted.","keywords":[]},{"title":"String Formatting","module":"Language Guide","url":"/docs/0.16/language/#string-formatting","contents":"Interpolated string expressions can be formatted using formatting options similar to Rust's. Inside an interpolated expression, options are provided after a : separator.","keywords":[]},{"title":"Minimum Width and Alignment","module":"Language Guide","url":"/docs/0.16/language/#minimum-width-and-alignment","contents":"A minimum width can be specified, ensuring that the formatted value takes up at least that many characters. The minimum width can be prefixed with an alignment modifier:< - left-aligned^ - centered> - right-aligned All values are left-aligned if an alignment modifier isn't specified, except for numbers which are right-aligned by default. The alignment modifier can be prefixed with a character which will be used to fill any empty space in the formatted string (the default character being  ). For numbers, the minimum width can be prefixed with 0, which will pad the number to the specified width with zeroes.","keywords":[]},{"title":"Maximum Width / Precision","module":"Language Guide","url":"/docs/0.16/language/#maximum-width-precision","contents":"A maximum width for the interpolated expression can be specified following a . character. For numbers, the maximum width acts as a 'precision' value, or in other words, the number of decimal places that will be rendered for the number.","keywords":[]},{"title":"Representation","module":"Language Guide","url":"/docs/0.16/language/#representation","contents":"Values can be formatted with alternative representations, with representations chosen with a character at the end of the format options.? - The value will be formatted with additional debug information when available. The following representations are only supported for numbers:e - exponential (lower-case)E - exponential (upper-case) The following representations are only supported for integers:b - binaryo - octalx - hexadecimal (lower-case)X - hexadecimal (upper-case)","keywords":[]},{"title":"Advanced Functions","module":"Language Guide","url":"/docs/0.16/language/#advanced-functions","contents":"Functions in Koto have some advanced features that are worth exploring.","keywords":[]},{"title":"Captured Variables","module":"Language Guide","url":"/docs/0.16/language/#captured-variables","contents":"When a variable is accessed in a function that wasn't declared locally, then it gets captured by copying it into the function. This behavior is different to many other languages, where captures are often taken by reference rather than by copy. It's also worth noting that captured variables will have the same starting value each time the function is called. To modify captured values, use a container (like a map) to hold on to mutable data.","keywords":["copy","captured","reference"]},{"title":"Variadic Functions","module":"Language Guide","url":"/docs/0.16/language/#variadic-functions","contents":"A variadic function can be created by appending ... to the last argument. When the function is called, any extra arguments will be collected into a tuple.","keywords":["variadic function"]},{"title":"Optional Arguments","module":"Language Guide","url":"/docs/0.16/language/#optional-arguments","contents":"Arguments can be made optional by assigning default values. Default argument values behave like captured variables, with the same value being applied each time the function is called. All arguments following an optional argument must also be optional, unless the last argument is variadic.","keywords":[]},{"title":"Unpacking Container Arguments","module":"Language Guide","url":"/docs/0.16/language/#unpacking-container-arguments","contents":"Functions that expect containers as arguments can unpack the container's elements directly by using parentheses. Any container that supports indexing operations (like lists and tuples) with a matching number of elements will be unpacked, otherwise an error will be thrown. Unpacked arguments can also be nested. An ellipsis (...) can be used to unpack any number of elements at the start or end of a container. A name can be added an ellipsis to capture the unpacked elements in a tuple.","keywords":["unpack"]},{"title":"Ignoring Arguments","module":"Language Guide","url":"/docs/0.16/language/#ignoring-arguments","contents":"As with assignments, _ can be used to ignore function arguments.","keywords":[]},{"title":"Packed Call Arguments","module":"Language Guide","url":"/docs/0.16/language/#packed-call-arguments","contents":"When calling a function, a packed argument is any argument to which ... is appended. The runtime will replace the packed argument with the output of iterating over the argument's contents. Any iterable value can be unpacked. This is especially useful when variadic arguments need to be forwarded to another variadic function. More than one argument can be unpacked during a call.","keywords":["packed argument"]},{"title":"Generators","module":"Language Guide","url":"/docs/0.16/language/#generators","contents":"Generators are iterators that are made by calling generator functions, which are any functions that contain a yield expression. The generator is paused each time yield is encountered, waiting for the caller to continue execution. Generator functions can accept arguments like any other function, and each time they're called a new generator is created. As with any other iterable value, the iterator module's functions are made available to generators. When defining a generator, a -> type hint is used to check the type of the generator's yield expressions.","keywords":["generator functions"]},{"title":"Custom Iterator Adaptors","module":"Language Guide","url":"/docs/0.16/language/#custom-iterator-adaptors","contents":"Generators can also serve as iterator adaptors by modifying the output of another iterator. Inserting a generator into the iterator module makes it available in any iterator chain.","keywords":["iterator adaptors"]},{"title":"Objects and Metamaps","module":"Language Guide","url":"/docs/0.16/language/#objects-and-metamaps","contents":"Value types with custom behaviour can be defined in Koto through the concept of objects. An object is any map that includes one or more metakeys (keys prefixed with @), that are stored in the object's metamap. Whenever operations are performed on the object, the runtime checks its metamap for corresponding metakeys. In the following example, the addition and multiply-assignment operators are implemented for a custom Foo object:","keywords":["objects","metakeys","metamap"]},{"title":"Arithmetic Operators","module":"Language Guide","url":"/docs/0.16/language/#arithmetic-operators","contents":"All arithmetic operators used in binary expressions can be implemented in an object's metamap by implementing functions for the appropriate metakeys. When the object is on the left-hand side (LHS) of the expression the metakeys are @+, @-, @*, @/, @%, and @^. If the value on the LHS of the expression doesn't support the operation and the object is on the right-hand side (RHS), then the metakeys are @r+, @r-, @r*, @r/, @r%, and @r^. If your type only supports an operation when the input has a certain type, then throw a koto.unimplemented error to let the runtime know that the RHS value should be checked. The runtime will catch the error and then attempt the operation with the implementation provided by the RHS value.","keywords":["RHS","LHS"]},{"title":"Comparison Operators","module":"Language Guide","url":"/docs/0.16/language/#comparison-operators","contents":"Comparison operators can also be implemented in an object's metamap by using the metakeys @==, @!=, @<, @<=, @>, and @>=. By default, @!= will invert the result of calling @==, so it's only necessary to implement it for types with special equality properties. Types that represent a total order only need to implement @< and @==, and the runtime will automatically derive results for @<=, @>, and @>=.","keywords":[]},{"title":"@negate","module":"Language Guide","url":"/docs/0.16/language/#negate","contents":"The @negate metakey overrides the - negation operator.","keywords":[]},{"title":"@size and @index","module":"Language Guide","url":"/docs/0.16/language/#size-and-index","contents":"The @size metakey defines how an object should report its size, while the @index metakey defines which values should be returned when indexing is performed. If @size is implemented, then @index should also be implemented. Implementing @size and @index allows an object to participate in argument unpacking. The @index implementation can support indexing by any input values that make sense for your object type, however for argument unpacking to work correctly, the runtime expects that indexing should be supported for at least single indices and ranges.","keywords":[]},{"title":"@index_mut","module":"Language Guide","url":"/docs/0.16/language/#index-mut","contents":"The @index_mut metakey defines how an object should behave when index-assignment is used. The given value should be a function that takes an index as the first argument, with the second argument being the value to be assigned.","keywords":[]},{"title":"@call","module":"Language Guide","url":"/docs/0.16/language/#call","contents":"The @call metakey defines how an object should behave when its called as a function.","keywords":[]},{"title":"@iterator","module":"Language Guide","url":"/docs/0.16/language/#iterator","contents":"The @iterator metakey defines how iterators should be created when an object is used in an iterable context. When called, @iterator should return an iterable value that will then be used for iterator operations. Note that the @iterator metakey will be ignored if the object also implements @next, which implies that the object is already an iterator.","keywords":["already"]},{"title":"@next","module":"Language Guide","url":"/docs/0.16/language/#next","contents":"The @next metakey allows for objects to treated as iterators. Whenever the runtime needs to produce an iterator from an object, it will first check the metamap for an implementation of @next, before looking for @iterator. The @next function will be called repeatedly during iteration, with the returned value being used as the iterator's output. When the returned value is null then the iterator will stop producing output.","keywords":[]},{"title":"@next_back","module":"Language Guide","url":"/docs/0.16/language/#next-back","contents":"The @next_back metakey is used by iterator.reversed when producing a reversed iterator. The runtime will only look for @next_back if @next is implemented.","keywords":[]},{"title":"@display","module":"Language Guide","url":"/docs/0.16/language/#display","contents":"The @display metakey defines how an object should be represented when displaying the object as a string.","keywords":[]},{"title":"@debug","module":"Language Guide","url":"/docs/0.16/language/#debug","contents":"The @debug metakey defines how an object should be represented when displaying the object in a debug context, e.g. when using debug, or when the ? representation is used in an interpolated expression. If @debug isn't defined, then @display will be used as a fallback.","keywords":[]},{"title":"@type","module":"Language Guide","url":"/docs/0.16/language/#type","contents":"The @type metakey takes a string which is used when checking a value's type, e.g. with type checks or koto.type.","keywords":[]},{"title":"@base","module":"Language Guide","url":"/docs/0.16/language/#base","contents":"Objects can inherit properties and behavior from other values, establishing a base value through the @base metakey. This allows objects to share common functionality while maintaining their own unique attributes. In the following example, two kinds of animals are created that share the speak function from their base value.","keywords":["base value"]},{"title":"@meta","module":"Language Guide","url":"/docs/0.16/language/#meta","contents":"The @meta metakey allows named metakeys to be added to the metamap. Metakeys defined with @meta are accessible via . access, similar to regular object keys, but they don't appear as part of the object's main data entries when treated as a regular map.","keywords":[]},{"title":"Sharing Metamaps","module":"Language Guide","url":"/docs/0.16/language/#sharing-metamaps","contents":"Metamaps can be shared between objects by using Map.with_meta, which helps to avoid inefficient duplication when creating a lot of objects. In the following example, behavior is overridden in a single metamap, which is then shared between object instances.","keywords":[]},{"title":"Error Handling","module":"Language Guide","url":"/docs/0.16/language/#error-handling","contents":"Errors can be thrown in the Koto runtime, which then cause the runtime to stop execution. A try / catch expression can be used to catch any errors thrown while inside the try block, allowing execution to continue. An optional finally block can be used for cleanup actions that need to performed whether or not an error was caught. throw can be used to explicitly throw an error when an exceptional condition has occurred. throw accepts strings or objects that implement @display.","keywords":["thrown","try","catch"]},{"title":"Type checks on catch blocks","module":"Language Guide","url":"/docs/0.16/language/#type-checks-on-catch-blocks","contents":"Type hints can also be used in try expressions to implement different error handling logic depending on the type of error that has been thrown. A series of catch blocks can be added to the try expression, each catching an error that has a particular type. The final catch block needs to not have a type check so that it can catch any errors that were missed by the other blocks.","keywords":["not"]},{"title":"Modules","module":"Language Guide","url":"/docs/0.16/language/#modules","contents":"Koto includes a module system that helps you to organize and re-use your code when your program grows too large for a single file.","keywords":[]},{"title":"import","module":"Language Guide","url":"/docs/0.16/language/#import","contents":"Values from other modules can be brought into the current scope using import. Multiple values from a single module can be imported at the same time. Imported values can be renamed using as for clarity or to avoid conflicts. You can also use * to import all of a module's exported values at once (known as a wildcard import) .","keywords":["wildcard import"]},{"title":"export","module":"Language Guide","url":"/docs/0.16/language/#export","contents":"A value can only be imported from a module if the module has exported it. export is used to add values to the current module's exports map, making them available to be imported by other modules. To add a type check to an exported assignment, use a let expression: export also accepts maps, or any other iterable value that yields a series of key/value pairs. This is convenient when exporting a lot of values, or generating exports programatically. Once a value has been exported, it becomes available anywhere in the module. Assigning a new value locally to a previously exported variable won't change the exported value. If you need to update the exported value, then it needs to be re-exported.","keywords":["exported","exports map"]},{"title":"@main","module":"Language Guide","url":"/docs/0.16/language/#main","contents":"A module can export a @main function, which will be called after the module has been compiled and successfully initialized. The use of export is optional when assigning to module metakeys like @main.","keywords":[]},{"title":"Module Paths","module":"Language Guide","url":"/docs/0.16/language/#module-paths","contents":"When looking for a module, import will look for a .koto file with a matching name, or for a folder with a matching name that contains a main.koto file. For example, when the expression import foo is evaluated, then the runtime will look for a foo.koto file in the same location as the current script, and if one isn't found then the runtime will look for foo/main.koto.","keywords":[]},{"title":"Testing","module":"Language Guide","url":"/docs/0.16/language/#testing","contents":"Koto includes a simple testing framework that allows you to automatically check that your code is behaving as you would expect.","keywords":[]},{"title":"Assertions","module":"Language Guide","url":"/docs/0.16/language/#assertions","contents":"The core library includes a collection of assertion functions which throw errors if a given condition isn't met. The assertion functions are found in the test module, and are included by default in the prelude.","keywords":["assertion"]},{"title":"Module Tests","module":"Language Guide","url":"/docs/0.16/language/#module-tests","contents":"Tests can be added to a module by exporting @test functions. A test function is considered to have failed if it throws an error (e.g. from an assertion). If Koto is configured to run tests, then the tests will be run after a module has been successfully initialized. After all tests have run successully, then the runtime will call the module's @main function if it's defined. The CLI doesn't enable tests by default when running scripts, but they can be enabled via a flag. @pre_test and @post_test functions can be implemented alongside tests for setup and cleanup operations. @pre_test will be run before each @test, and @post_test will be run after.","keywords":[]},{"title":"Running Tests Manually","module":"Language Guide","url":"/docs/0.16/language/#running-tests-manually","contents":"Tests can be run manually by calling test.run_tests with a map that contains @test functions. You've made it to the end of the guide! If you spotted any mistakes, or noticed any sections that were less clear than you would have liked, then please open an issue or create a PR. For further reading, take a look at docs for the core library, the extra libs, or how Koto can be integrated into Rust applications in the Rust API docs.","keywords":[]},{"title":"Rust API","module":"API","url":"/docs/0.16/api/#rust-api","contents":"This document contains a collection of examples of how to interact with Koto from Rust code. The complete API documentation can be found here.","keywords":[]},{"title":"Hello World","module":"API","url":"/docs/0.16/api/#hello-world","contents":"To run a Koto script, instantiate koto::Koto and call compile_and_run:","keywords":[]},{"title":"Getting a Return Value","module":"API","url":"/docs/0.16/api/#getting-a-return-value","contents":"The result of calling compile_and_run is a KValue, which is Koto's main value type. KValue is an enum that contains variants for each of the core Koto types, like Number, String, etc. The type of a KValue as a string can be retrieved via KValue::type_as_string, and to render a KValue, call Koto::value_to_string.","keywords":[]},{"title":"Getting an Exported Value","module":"API","url":"/docs/0.16/api/#getting-an-exported-value","contents":"Values that are exported from the script are inserted in to the exports map, which can be accessed by calling Koto::exports().","keywords":["exports"]},{"title":"Using Serde for Value Conversions","module":"API","url":"/docs/0.16/api/#using-serde-for-value-conversions","contents":"Types that implement serde::Deserialize and Serialize can be converted to and from Koto values via koto::serde::to_koto_value and from_koto_value.","keywords":[]},{"title":"Adding Values to the Prelude","module":"API","url":"/docs/0.16/api/#adding-values-to-the-prelude","contents":"The runtime's prelude is a KMap, which is Koto's standard hashmap type. Values can be added to the prelude via KMap::insert, taking any Rust value that implements Into<KValue>. Basic types like strings and numbers are automatically converted to corresponding Koto types.","keywords":[]},{"title":"Removing Values from the Prelude","module":"API","url":"/docs/0.16/api/#removing-values-from-the-prelude","contents":"Values can also be removed from the prelude, which can be useful if you want to restrict the capabilities of a script.","keywords":[]},{"title":"Passing Arguments to Koto","module":"API","url":"/docs/0.16/api/#passing-arguments-to-koto","contents":"The arguments that are accessible in a script from os.args can be set via Koto::set_args.","keywords":[]},{"title":"Calling Rust Functions in Koto","module":"API","url":"/docs/0.16/api/#calling-rust-functions-in-koto","contents":"Any Rust function that implements KotoFunction can be made available to the Koto runtime.","keywords":[]},{"title":"Calling Koto Functions in Rust","module":"API","url":"/docs/0.16/api/#calling-koto-functions-in-rust","contents":"Koto::call_function can be used to call Koto functions, or any other callable Koto values.","keywords":[]},{"title":"Adding a Module to the Prelude","module":"API","url":"/docs/0.16/api/#adding-a-module-to-the-prelude","contents":"A module in Koto is simply a KMap, conventionally with a defined @type.","keywords":[]},{"title":"Adding a Custom Object Type","module":"API","url":"/docs/0.16/api/#adding-a-custom-object-type","contents":"Any Rust type that implements KotoObject can be used in the Koto runtime. KotoObject requires KotoType, KotoCopy, and KotoEntries to be implemented.","keywords":[]},{"title":"Disabling type checks","module":"API","url":"/docs/0.16/api/#disabling-type-checks","contents":"Runtime type checks are enabled by default, the compiler can be prevented from emitting type check instructions by disabling the enable_type_checks flag.","keywords":[]},{"title":"Using the multi-threaded runtime","module":"API","url":"/docs/0.16/api/#using-the-multi-threaded-runtime","contents":"By default, Koto's runtime is single-threaded, and many of its core types (e.g. KValue) don't implement Send or Sync. For applications that need to support multi-threaded scripting, the arc feature switches from an Rc<RefCell<T>>-based memory strategy to one using Arc<RwLock<T>>. Only one memory strategy can be enabled at a time, so default features need to be disabled.","keywords":[]},{"title":"Using Koto in a REPL","module":"API","url":"/docs/0.16/api/#using-koto-in-a-repl","contents":"Some applications (like REPLs) require assigned variables to persist between each script evaluation. This can be achieved by enabling the export_top_level_ids flag, which will result in all top-level assignments being exported.","keywords":[]},{"title":"The Koto CLI","module":"CLI","url":"/docs/0.16/cli/#the-koto-cli","contents":"Koto was originally designed as an extension language for Rust applications, but it is also usable as a standalone scripting language via the Koto CLI. The CLI can run .koto scripts, and provides an interactive REPL.","keywords":[]},{"title":"Installation","module":"CLI","url":"/docs/0.16/cli/#installation","contents":"Installing the Koto CLI currently requires the Rust toolchain (see rustup.sh for installation instructions). With Rust available on your system, run cargo install koto_cli, which provides you with the koto command.","keywords":[]},{"title":"Running Scripts","module":"CLI","url":"/docs/0.16/cli/#running-scripts","contents":"Koto scripts can be run by the CLI by passing the script's name as the first argument.","keywords":[]},{"title":"Command Arguments","module":"CLI","url":"/docs/0.16/cli/#command-arguments","contents":"Arguments following the script are made available via os.args.","keywords":[]},{"title":"Running Tests","module":"CLI","url":"/docs/0.16/cli/#running-tests","contents":"Tests are disabled by default in the CLI, but can be enabled by using the --tests flag. --tests only enables tests in the script that's being run, use the --import_tests flag to also enable tests in any imported modules.","keywords":[]},{"title":"Using the REPL","module":"CLI","url":"/docs/0.16/cli/#using-the-repl","contents":"Running koto without any arguments will start the Koto REPL, where Koto expressions can be entered and evaluated interactively.","keywords":[]},{"title":"Help","module":"CLI","url":"/docs/0.16/cli/#help","contents":"The language guide and the core library reference, can be accessed in the REPL using the help command.","keywords":[]},{"title":"Formatting","module":"CLI","url":"/docs/0.16/cli/#formatting","contents":"The koto CLI can format scripts with the --format flag. If a script path is provided then the file will be formatted in place, otherwise the script will be read from stdin and written to stdout. Placing a #[fmt:skip] directive before an expression will cause it to be left alone during formatting.","keywords":[]},{"title":"Configuration","module":"CLI","url":"/docs/0.16/cli/#configuration","contents":"Options for formatting and the REPL can be chosen by exporting them from a config.koto file, which is expected to be placed in ~/.koto/config.koto. The default configuration can be displayed with the --print_config flag.","keywords":[]},{"title":"Format Options","module":"CLI","url":"/docs/0.16/cli/#format-options","contents":"always_indent_arms: Whether or not match and switch arms should always be indented. (default: false)chain_break_threshold: The threshold that causes chain expressions to be broken onto multiple lines. (default: 4)The threshold counts against the number of . accesses that are followed by a call or index.a.b.c().d() - 2 . accesses that count against the threshold.a[0].b[1].c().d().e() - 4 . accesses that count against the threshold.A value of 0 disables the threshold.indent_width: The width in characters to use when inserting indents. (default: 2)line_length: The maximum line length. (default: 100)","keywords":[]},{"title":"REPL Options","module":"CLI","url":"/docs/0.16/cli/#repl-options","contents":"edit_mode: The editing keybindings that should be enabled in the REPL. (emacs or vim, default: emacs)colored_output: Whether or not the REPL should use colored output. (default: true)max_history: The maximum number of entries to keep in its persistent history (default: 100)The history is stored in ~/.koto/repl_history.txt","keywords":[]},{"title":"map.clear","module":"Core Library","url":"/docs/0.16/core/map/#clear","contents":"Clears the map by removing all of its elements, and returns the map.","keywords":[]},{"title":"map.contains_key","module":"Core Library","url":"/docs/0.16/core/map/#contains-key","contents":"Returns true if the map contains a value with the given key, and false otherwise.","keywords":[]},{"title":"map.extend","module":"Core Library","url":"/docs/0.16/core/map/#extend","contents":"Extends the map with the output of the iterator, and returns the map.map.insert","keywords":[]},{"title":"map.get","module":"Core Library","url":"/docs/0.16/core/map/#get","contents":"Returns the value corresponding to the given key, or the provided default value if the map doesn't contain the key. If no default value is provided then null is returned.map.get_index","keywords":[]},{"title":"map.get_index","module":"Core Library","url":"/docs/0.16/core/map/#get-index","contents":"Returns the entry at the given index as a key/value tuple, or the provided default value if the map doesn't contain an entry at that index. If no default value is provided then null is returned.map.get","keywords":[]},{"title":"map.get_meta","module":"Core Library","url":"/docs/0.16/core/map/#get-meta","contents":"Returns a Map that contains the input's Meta Map, and no data.map.with_meta","keywords":[]},{"title":"map.insert","module":"Core Library","url":"/docs/0.16/core/map/#insert","contents":"Inserts an entry into the map with the given key and value. Inserts an entry into the map with the given key, and null as its value. If the key already existed in the map, then the old value is returned. If the key didn't already exist, then null is returned. See the language guide for a description of the types of values that can be used as map keys.map.getmap.removemap.update","keywords":[]},{"title":"map.is_empty","module":"Core Library","url":"/docs/0.16/core/map/#is-empty","contents":"Returns true if the map contains no entries, otherwise false.","keywords":[]},{"title":"map.keys","module":"Core Library","url":"/docs/0.16/core/map/#keys","contents":"Returns an iterator that iterates in order over the map's keys.map.values","keywords":[]},{"title":"map.remove","module":"Core Library","url":"/docs/0.16/core/map/#remove","contents":"Removes the entry that matches the given key. If the entry existed then its value is returned, otherwise null is returned.map.insert","keywords":[]},{"title":"map.sort","module":"Core Library","url":"/docs/0.16/core/map/#sort","contents":"Sorts the map's entries in place by key, and then returns the map. Sorts the map's entries in place based on the output of calling a 'sort' function for each entry, and then returns the map. The entry's key and value are passed into the sort_key function as separate arguments. The function's result is cached, so it only gets called once per entry.","keywords":[]},{"title":"map.update","module":"Core Library","url":"/docs/0.16/core/map/#update","contents":"Updates the value associated with a given key by calling the updater function. If an entry exists with the given key, then updater will be called with the existing entry's value, and the result of the function will replace the existing value. If no entry exists with the given key, then updater will be called with null, and the result will be inserted into the map as a new entry. The return value is the result of calling the updater function. This variant of update takes a default value that is provided to the updater function if no entry exists with the given key.map.insert","keywords":[]},{"title":"map.values","module":"Core Library","url":"/docs/0.16/core/map/#values","contents":"Returns an iterator that iterates in order over the map's values.map.keys","keywords":[]},{"title":"map.with_meta","module":"Core Library","url":"/docs/0.16/core/map/#with-meta","contents":"Returns a new Map that contains the data from the first argument, along with the Meta Map from the second argument.map.get_meta","keywords":[]},{"title":"iterator.advance","module":"Core Library","url":"/docs/0.16/core/iterator/#advance","contents":"Advances an iterator by calling next by n times, or until the end of the iterator is encountered. The number of remaining steps is returned, with 0 indicating that n steps were successfully advanced. If advancing the iterator causes an error to be thrown, then the error will be rethrown by advance.iterator.skip","keywords":[]},{"title":"iterator.all","module":"Core Library","url":"/docs/0.16/core/iterator/#all","contents":"Checks the Iterable's values against a test function. The test function should return true if the value passes the test, otherwise it should return false. all will return true if all values pass the test, otherwise it will return false. all stops running as soon as it finds a value that fails the test.iterator.any","keywords":["all"]},{"title":"iterator.any","module":"Core Library","url":"/docs/0.16/core/iterator/#any","contents":"Checks the Iterable's values against a test function. The test function should return true if the value passes the test, otherwise it should return false. any will return true if any of the values pass the test, otherwise it will return false. any stops running as soon as it finds a passing test.iterator.all","keywords":["any"]},{"title":"iterator.chain","module":"Core Library","url":"/docs/0.16/core/iterator/#chain","contents":"chain returns an iterator that iterates over the output of the first iterator, followed by the output of the second iterator.","keywords":[]},{"title":"iterator.chunks","module":"Core Library","url":"/docs/0.16/core/iterator/#chunks","contents":"Returns an iterator that splits up the input data into chunks of size N, where each chunk is provided as a Tuple. The final chunk may have fewer than N elements.","keywords":[]},{"title":"iterator.consume","module":"Core Library","url":"/docs/0.16/core/iterator/#consume","contents":"Consumes the output of the iterator. Consumes the output of the iterator, calling the provided function with each iterator output value.","keywords":[]},{"title":"iterator.count","module":"Core Library","url":"/docs/0.16/core/iterator/#count","contents":"Counts the number of items yielded from the iterator.","keywords":[]},{"title":"iterator.cycle","module":"Core Library","url":"/docs/0.16/core/iterator/#cycle","contents":"Takes an Iterable and returns a new iterator that endlessly repeats the iterable's output. The iterable's output gets cached, which may result in a large amount of memory being used if the cycle has a long length.","keywords":[]},{"title":"iterator.each","module":"Core Library","url":"/docs/0.16/core/iterator/#each","contents":"Creates a new iterator that yields the result of calling the provided function with each value from the input iterator.","keywords":[]},{"title":"iterator.enumerate","module":"Core Library","url":"/docs/0.16/core/iterator/#enumerate","contents":"Creates an iterator that yields each value along with an associated index.","keywords":[]},{"title":"iterator.find","module":"Core Library","url":"/docs/0.16/core/iterator/#find","contents":"Returns the first value in the iterable that passes the test function. The function is called for each value in the iterator, and should return either true if the value is a match, or false if it's not. The first matching value will cause iteration to stop. If no match is found then null is returned.","keywords":[]},{"title":"iterator.flatten","module":"Core Library","url":"/docs/0.16/core/iterator/#flatten","contents":"Returns the output of the input iterator, with any nested iterable values flattened out. Note that only one level of flattening is performed, so any double-nested containers will still be present in the output.iterator.find","keywords":[]},{"title":"iterator.fold","module":"Core Library","url":"/docs/0.16/core/iterator/#fold","contents":"Returns the result of 'folding' the iterator's values into an accumulator function. The function takes the accumulated value and the next iterator value, and then returns the result of folding the value into the accumulator. The first argument is an initial accumulated value that gets passed to the function along with the first value from the iterator. The result is then the final accumulated value. This operation is also known in other languages as reduce, accumulate, inject, fold left, along with other names.iterator.productiterator.sum","keywords":[]},{"title":"iterator.generate","module":"Core Library","url":"/docs/0.16/core/iterator/#generate","contents":"Creates an iterator that yields the result of repeatedly calling the generator function. Warning: This version of generate will iterate endlessly, so consider using an adaptor like iterator.take to produce an iterator that has an end. Creates an iterator that yields the result of calling the generator function n times.iterator.repeat","keywords":["Warning"]},{"title":"iterator.intersperse","module":"Core Library","url":"/docs/0.16/core/iterator/#intersperse","contents":"Returns an iterator that yields a copy of the provided value between each adjacent pair of output values. Returns an iterator that yields the result of calling the provided function between each adjacent pair of output values.","keywords":[]},{"title":"iterator.iter","module":"Core Library","url":"/docs/0.16/core/iterator/#iter","contents":"Returns an iterator that yields the provided iterable's values. Iterable values will be automatically accepted by most iterator operations, so it's usually not necessary to call .iter(), however it can be usefult sometimes to make a standalone iterator for manual iteration. Note that calling .iter with an Iterator will return the iterator without modification. If a copy of the iterator is needed then see koto.copy and koto.deep_copy.koto.copykoto.deep_copy","keywords":[]},{"title":"iterator.keep","module":"Core Library","url":"/docs/0.16/core/iterator/#keep","contents":"Returns an iterator that keeps only the values that pass a test function. The function is called for each value in the iterator, and should return either true if the value should be kept in the iterator output, or false if it should be discarded.","keywords":[]},{"title":"iterator.last","module":"Core Library","url":"/docs/0.16/core/iterator/#last","contents":"Consumes the iterator, returning the last yielded value.","keywords":[]},{"title":"iterator.max","module":"Core Library","url":"/docs/0.16/core/iterator/#max","contents":"Returns the maximum value found in the iterable. Returns the maximum value found in the iterable, based on first calling a 'key' function with the value, and then using the resulting keys for the comparisons. A < 'less than' comparison is performed between each value and the maximum found so far, until all values in the iterator have been compared.iterator.miniterator.min_max","keywords":[]},{"title":"iterator.min","module":"Core Library","url":"/docs/0.16/core/iterator/#min","contents":"Returns the minimum value found in the iterable. Returns the minimum value found in the iterable, based on first calling a 'key' function with the value, and then using the resulting keys for the comparisons. A < 'less than' comparison is performed between each value and the minimum found so far, until all values in the iterator have been compared.iterator.maxiterator.min_max","keywords":[]},{"title":"iterator.min_max","module":"Core Library","url":"/docs/0.16/core/iterator/#min-max","contents":"Returns the minimum and maximum values found in the iterable. Returns the minimum and maximum values found in the iterable, based on first calling a 'key' function with the value, and then using the resulting keys for the comparisons. A < 'less than' comparison is performed between each value and both the minimum and maximum found so far, until all values in the iterator have been compared.iterator.maxiterator.min","keywords":[]},{"title":"iterator.next","module":"Core Library","url":"/docs/0.16/core/iterator/#next","contents":"Returns the next value from the iterator wrapped in an IteratorOutput, or null if the iterator has been exhausted.iterator.next_back","keywords":[]},{"title":"iterator.next_back","module":"Core Library","url":"/docs/0.16/core/iterator/#next-back","contents":"Returns the next value from the end of the iterator wrapped in an IteratorOutput, or null if the iterator has been exhausted. This only works with iterators that have a defined end, so attempting to call next_back on endless iterators like iterator.generate will result in an error.iterator.nextiterator.reversed","keywords":[]},{"title":"iterator.once","module":"Core Library","url":"/docs/0.16/core/iterator/#once","contents":"Returns an iterator that yields the given value a single time.iterator.generateiterator.repeat","keywords":[]},{"title":"iterator.peekable","module":"Core Library","url":"/docs/0.16/core/iterator/#peekable","contents":"Wraps the given iterable value in a peekable iterator. Returns the next value from the iterator without advancing it. The peeked value is cached until the iterator is advanced.iterator.next Returns the next value from the end of the iterator without advancing it. The peeked value is cached until the iterator is advanced.iterator.next_back","keywords":[]},{"title":"iterator.position","module":"Core Library","url":"/docs/0.16/core/iterator/#position","contents":"Returns the position of the first value in the iterable that passes the test function. The function is called for each value in the iterator, and should return either true if the value is a match, or false if it's not. The first matching value will cause iteration to stop, and the number of steps taken to reach the matched value is returned as the result. If no match is found then null is returned.iterator.find","keywords":[]},{"title":"iterator.product","module":"Core Library","url":"/docs/0.16/core/iterator/#product","contents":"Returns the result of multiplying each value in the iterable together, using 1 as the initial value.iterator.folditerator.sum","keywords":[]},{"title":"iterator.repeat","module":"Core Library","url":"/docs/0.16/core/iterator/#repeat","contents":"Creates an iterator that endlessly yields the provided value. Warning: This version of repeat will iterate endlessly, so consider using an adaptor like iterator.take to produce an iterator with an end. Creates an iterator that yields n repeats of the provided value.iterator.generateiterator.once","keywords":["Warning"]},{"title":"iterator.reversed","module":"Core Library","url":"/docs/0.16/core/iterator/#reversed","contents":"Reverses the order of the iterator's output. This only works with iterators that have a defined end, so attempting to reverse endless iterators like iterator.generate will result in an error.","keywords":[]},{"title":"iterator.skip","module":"Core Library","url":"/docs/0.16/core/iterator/#skip","contents":"Returns an iterator that will skip over the given number of output steps. Note that skipping only occurs lazily when the iterator is consumed. To skip iterator output immediately see [iterator.advance].iterator.advanceiterator.stepiterator.take","keywords":[]},{"title":"iterator.step","module":"Core Library","url":"/docs/0.16/core/iterator/#step","contents":"Steps over the iterable's output by the provided step size.iterator.skip","keywords":[]},{"title":"iterator.sum","module":"Core Library","url":"/docs/0.16/core/iterator/#sum","contents":"Returns the result of adding each value in the iterable together, using 0 as the initial value. Returns the result of adding each value in the iterable together, using the provided initial value as the start of the operation.iterator.folditerator.product","keywords":[]},{"title":"iterator.take","module":"Core Library","url":"/docs/0.16/core/iterator/#take","contents":"Creates an iterator that yields a number of values from the input before finishing. Creates an iterator that yields values from the input while they pass a test function. The test function should return true if the iterator should continue to yield values, and false if the iterator should stop yielding values.iterator.skip","keywords":[]},{"title":"iterator.to_list","module":"Core Library","url":"/docs/0.16/core/iterator/#to-list","contents":"Consumes all values coming from the iterator and places them in a list.iterator.to_mapiterator.to_stringiterator.to_tuple","keywords":[]},{"title":"iterator.to_map","module":"Core Library","url":"/docs/0.16/core/iterator/#to-map","contents":"Consumes all values coming from the iterator and places them in a map. If a value is a tuple, then the first element in the tuple will be inserted as the key for the map entry, and the second element will be inserted as the value. If the value is anything other than a tuple, then it will be inserted as the map key, with null as the entry's value.iterator.to_listiterator.to_stringiterator.to_tuple","keywords":[]},{"title":"iterator.to_string","module":"Core Library","url":"/docs/0.16/core/iterator/#to-string","contents":"Consumes all values coming from the iterator and produces a string containing the formatted values.iterator.to_listiterator.to_mapiterator.to_tuple","keywords":[]},{"title":"iterator.to_tuple","module":"Core Library","url":"/docs/0.16/core/iterator/#to-tuple","contents":"Consumes all values coming from the iterator and places them in a tuple.iterator.to_listiterator.to_mapiterator.to_string","keywords":[]},{"title":"iterator.windows","module":"Core Library","url":"/docs/0.16/core/iterator/#windows","contents":"Returns an iterator that splits up the input data into overlapping windows of the specified size, where each window is provided as a Tuple. If the input has fewer elements than the window size, then no windows will be produced.","keywords":[]},{"title":"iterator.zip","module":"Core Library","url":"/docs/0.16/core/iterator/#zip","contents":"Combines the values in two iterables into an iterator that yields corresponding pairs of values, one at a time from each input iterable.","keywords":[]},{"title":"iterator.IteratorOutput","module":"Core Library","url":"/docs/0.16/core/iterator/#iteratoroutput","contents":"A wrapper for a single item of iterator output. This exists to allow functions like iterator.next to return null to indicate that the iterator has been exhausted, while also allowing null to appear in the iterator's output.","keywords":[]},{"title":"iterator.IteratorOutput.get","module":"Core Library","url":"/docs/0.16/core/iterator/#iteratoroutput-get","contents":"Returns the wrapped iterator output value.","keywords":[]},{"title":"koto","module":"Core Library","url":"/docs/0.16/core/koto/#koto","contents":"A collection of utilities for working with the Koto runtime.","keywords":[]},{"title":"koto.copy","module":"Core Library","url":"/docs/0.16/core/koto/#copy","contents":"Makes a copy of the provided value. For values that have shared mutable data (i.e., List, Map), unique copies of the data will be made. Note that this only applies to the first level of data, so nested containers will still share their data with their counterparts in the original data. To make a copy where any nested containers are also unique, use koto.deep_copy. Copied iterators share the same underlying data as the original, but have a unique iteration position, which is part of an iterator's shared state by default. If the iterator is a generator, some effort will be made to make the generator's copy produce the same output as the original. However, this isn't guaranteed to be successful. Specifically, the value stack of the copied virtual machine will be scanned for iterators, and each iterator will have a copy made. Iterators that may be used in other ways by the generator (such as being stored in containers or function captures) won't be copied and will still have shared state.koto.deep_copy","keywords":[]},{"title":"koto.deep_copy","module":"Core Library","url":"/docs/0.16/core/koto/#deep-copy","contents":"Makes a unique deep copy of the value's data. This makes a unique copy of the value's data, and then recursively makes deep copies of any nested containers in the value. If only the first level of data needs to be made unique, then use koto.copy.koto.copy","keywords":["deep"]},{"title":"koto.hash","module":"Core Library","url":"/docs/0.16/core/koto/#hash","contents":"Returns the value's hash as an integer, or null if the value is not hashable.","keywords":[]},{"title":"koto.load","module":"Core Library","url":"/docs/0.16/core/koto/#load","contents":"Compiles the provided Koto script and returns a compiled Chunk. Any compilation errors get thrown.koto.run","keywords":[]},{"title":"koto.run","module":"Core Library","url":"/docs/0.16/core/koto/#run","contents":"Compiles and runs the provided Koto script, and returns the resulting value. Any compilation or runtime errors get thrown. Runs the compiled Chunk, and returns the resulting value. Any runtime errors encountered during execution get thrown.koto.load","keywords":[]},{"title":"koto.script_dir","module":"Core Library","url":"/docs/0.16/core/koto/#script-dir","contents":"Returns the path of the directory containing the current script, if available.","keywords":[]},{"title":"koto.script_path","module":"Core Library","url":"/docs/0.16/core/koto/#script-path","contents":"Returns the path of the file containing the current script, if available.","keywords":[]},{"title":"koto.size","module":"Core Library","url":"/docs/0.16/core/koto/#size","contents":"Returns the size of a value. The size of a value is typically defined as the number of elements in a container, with some notable exceptions:For strings, the size is the number of bytes in the string data.For ranges, the size is the number of integers in the range.For non-inclusive ranges, this is equivalent to range.end() - range.start().For inclusive ranges, this is equivalent to range.end() + 1 - range.start().If the range is unbounded then an error will be thrown.An error will be thrown if the value doesn't have a defined size.","keywords":["size"]},{"title":"koto.type","module":"Core Library","url":"/docs/0.16/core/koto/#type","contents":"Returns the type of the input value as a String.","keywords":[]},{"title":"koto.unimplemented","module":"Core Library","url":"/docs/0.16/core/koto/#unimplemented","contents":"An instance of Unimplemented, which should be thrown from overridden arithmetic operators when the operation isn't supported with the given input type.","keywords":[]},{"title":"string.bytes","module":"Core Library","url":"/docs/0.16/core/string/#bytes","contents":"Returns an iterator that yields a series of integers representing the bytes contained in the string data.string.from_bytes","keywords":[]},{"title":"string.chars","module":"Core Library","url":"/docs/0.16/core/string/#chars","contents":"Returns an iterator that yields the string's characters as strings. A 'character' in Koto is defined as being a unicode grapheme cluster. It's worth noting that is the default iteration behaviour for a string, so calling 'hello'.chars() is equivalent to calling iterator.iter('hello').string.char_indices","keywords":[]},{"title":"string.char_indices","module":"Core Library","url":"/docs/0.16/core/string/#char-indices","contents":"Returns an iterator that yields the indices of each grapheme cluster in the string. Each cluster is represented as a range, which can then be used to extract the cluster from the string via indexing.string.chars","keywords":[]},{"title":"string.contains","module":"Core Library","url":"/docs/0.16/core/string/#contains","contents":"Returns true if the second provided string is a sub-string of the first.","keywords":[]},{"title":"string.ends_with","module":"Core Library","url":"/docs/0.16/core/string/#ends-with","contents":"Returns true if the first string ends with the second string.","keywords":[]},{"title":"string.escape","module":"Core Library","url":"/docs/0.16/core/string/#escape","contents":"Returns the string with characters replaced with escape codes. For example, newlines get replaced with \\n, tabs get replaced with \\t.","keywords":[]},{"title":"string.is_empty","module":"Core Library","url":"/docs/0.16/core/string/#is-empty","contents":"Returns true if the string contains no characters.","keywords":[]},{"title":"string.from_bytes","module":"Core Library","url":"/docs/0.16/core/string/#from-bytes","contents":"Returns a string containing the bytes that are produced by the input iterable. The iterable output must contain only Numbers in the 0..=255 range. The resulting sequence of bytes must contain UTF-8 data.string.bytes","keywords":[]},{"title":"string.lines","module":"Core Library","url":"/docs/0.16/core/string/#lines","contents":"Returns an iterator that yields the lines contained in the input string. Lines end with either \\r\\n or \\n.","keywords":[]},{"title":"string.repeat","module":"Core Library","url":"/docs/0.16/core/string/#repeat","contents":"Creates a new string by repeating the input n times.","keywords":[]},{"title":"string.replace","module":"Core Library","url":"/docs/0.16/core/string/#replace","contents":"Returns a copy of the input string with all occurrences of the match string replaced with a replacement string.","keywords":[]},{"title":"string.split","module":"Core Library","url":"/docs/0.16/core/string/#split","contents":"Returns an iterator that yields strings resulting from splitting the first string wherever the match string is encountered. Returns an iterator that yields strings resulting from splitting the input string based on the result of calling a match function. The match function will be called for each grapheme in the input string, and splits will occur when the function returns true.","keywords":[]},{"title":"string.starts_with","module":"Core Library","url":"/docs/0.16/core/string/#starts-with","contents":"Returns true if the first string starts with the match string.","keywords":[]},{"title":"string.strip_prefix","module":"Core Library","url":"/docs/0.16/core/string/#strip-prefix","contents":"Returns the input string with the given prefix removed, or null if the input string doesn't start with prefix.string.strip_suffixstring.trim_start","keywords":[]},{"title":"string.strip_suffix","module":"Core Library","url":"/docs/0.16/core/string/#strip-suffix","contents":"Returns the input string with the given suffix removed, or null if the input string doesn't end with suffix.string.strip_prefixstring.trim_end","keywords":[]},{"title":"string.to_lowercase","module":"Core Library","url":"/docs/0.16/core/string/#to-lowercase","contents":"Returns a lowercase version of the input string.","keywords":[]},{"title":"string.to_number","module":"Core Library","url":"/docs/0.16/core/string/#to-number","contents":"Returns the string converted into a number.0x, 0o, and 0b prefixes will cause the parsing to treat the input as containing a hexadecimal, octal, or binary number respectively.Otherwise the number is assumed to be base 10, and the presence of a decimal point will produce a float instead of an integer. If a number can't be produced then null is returned. Returns the string converted into a number given the specified base. The base must be an integer in the range 2..=36, otherwise an error will be thrown. If the string contains non-numerical digits then null is returned.","keywords":[]},{"title":"string.to_uppercase","module":"Core Library","url":"/docs/0.16/core/string/#to-uppercase","contents":"Returns an uppercase version of the input string.","keywords":[]},{"title":"string.trim","module":"Core Library","url":"/docs/0.16/core/string/#trim","contents":"Returns a string with any whitespace removed from the start and end of the input. Returns a string with all occurrences of the pattern removed from the start and end of the input.string.trim_startstring.trim_end","keywords":[]},{"title":"string.trim_start","module":"Core Library","url":"/docs/0.16/core/string/#trim-start","contents":"Returns a string with any whitespace removed from the start of the input. Returns a string with all occurrences of the pattern removed from the start of the input.string.strip_prefixstring.trimstring.trim_end","keywords":[]},{"title":"string.trim_end","module":"Core Library","url":"/docs/0.16/core/string/#trim-end","contents":"Returns a string with any whitespace removed from the end of the input. Returns a string with all occurrences of the pattern removed from the end of the input.string.strip_suffixstring.trimstring.trim_start","keywords":[]},{"title":"list.clear","module":"Core Library","url":"/docs/0.16/core/list/#clear","contents":"Clears the list by removing all of its elements, and returns the cleared list.","keywords":[]},{"title":"list.contains","module":"Core Library","url":"/docs/0.16/core/list/#contains","contents":"Returns true if the list contains an element that matches the input value. Matching is performed with the == equality operator.","keywords":[]},{"title":"list.extend","module":"Core Library","url":"/docs/0.16/core/list/#extend","contents":"Extends the list with the output of the iterator, and returns the list.list.push","keywords":[]},{"title":"list.fill","module":"Core Library","url":"/docs/0.16/core/list/#fill","contents":"Fills the list with copies of the provided value, and returns the list.","keywords":[]},{"title":"list.first","module":"Core Library","url":"/docs/0.16/core/list/#first","contents":"Returns the first value in the list, or null if the list is empty.list.getlist.last","keywords":[]},{"title":"list.get","module":"Core Library","url":"/docs/0.16/core/list/#get","contents":"Gets the element at the given index in the list. If the list doesn't contain a value at that position then the provided default value is returned. If no default value is provided then null is returned.list.firstlist.last","keywords":[]},{"title":"list.insert","module":"Core Library","url":"/docs/0.16/core/list/#insert","contents":"Inserts the value into the list at the given index position, and returns the list. Elements in the list at or after the given position will be shifted to make space for the new value. An error is thrown if position is negative or greater than the size of the list.list.remove","keywords":[]},{"title":"list.is_empty","module":"Core Library","url":"/docs/0.16/core/list/#is-empty","contents":"Returns true if the list has a size of zero, and false otherwise.","keywords":[]},{"title":"list.last","module":"Core Library","url":"/docs/0.16/core/list/#last","contents":"Returns the last value in the list, or null if the list is empty.list.firstlist.get","keywords":[]},{"title":"list.pop","module":"Core Library","url":"/docs/0.16/core/list/#pop","contents":"Removes the last value from the list and returns it. If the list is empty then null is returned.list.push","keywords":[]},{"title":"list.push","module":"Core Library","url":"/docs/0.16/core/list/#push","contents":"Adds the value to the end of the list, and returns the list.list.pop","keywords":[]},{"title":"list.remove","module":"Core Library","url":"/docs/0.16/core/list/#remove","contents":"Removes the value at the given position from the list, and returns the removed value. An error is thrown if the position isn't a valid index in the list.list.insert","keywords":[]},{"title":"list.resize","module":"Core Library","url":"/docs/0.16/core/list/#resize","contents":"Grows or shrinks the list to the specified size, and returns the list. If the new size is larger, then copies of the default value (or null if no value is provided) are used to fill the new space.","keywords":[]},{"title":"list.resize_with","module":"Core Library","url":"/docs/0.16/core/list/#resize-with","contents":"Grows or shrinks the list to the specified size, and returns the list. If the new size is larger, then the provided function will be called repeatedly to fill the remaining space, with the result of the function being added to the end of the list.","keywords":[]},{"title":"list.retain","module":"Core Library","url":"/docs/0.16/core/list/#retain","contents":"Retains matching values in the list (discarding values that don't match), and returns the list. If test is a function, then the function will be called with each of the list's values, and if the function returns true then the value will be retained, otherwise if the function returns false then the value will be discarded. If the test value is not a function, then the list's values will be compared using the == equality operator, and then retained if they match.","keywords":[]},{"title":"list.reverse","module":"Core Library","url":"/docs/0.16/core/list/#reverse","contents":"Reverses the order of the list's contents, and returns the list.","keywords":[]},{"title":"list.sort","module":"Core Library","url":"/docs/0.16/core/list/#sort","contents":"Sorts the list in place, and returns the list. Sorts the list in place, based on the output of calling a key function for each of the list's elements, and returns the list. The key function's result is cached, so it's only called once per element.","keywords":[]},{"title":"list.swap","module":"Core Library","url":"/docs/0.16/core/list/#swap","contents":"Swaps the contents of the two input lists.","keywords":[]},{"title":"list.to_tuple","module":"Core Library","url":"/docs/0.16/core/list/#to-tuple","contents":"Returns a copy of the list data as a tuple.","keywords":[]},{"title":"list.transform","module":"Core Library","url":"/docs/0.16/core/list/#transform","contents":"Transforms the list data in place by replacing each value with the result of calling the provided transformer function, and then returns the list.","keywords":[]},{"title":"tuple.contains","module":"Core Library","url":"/docs/0.16/core/tuple/#contains","contents":"Returns true if the tuple contains a value that matches the input value. Matching is performed with the == equality operator.","keywords":[]},{"title":"tuple.first","module":"Core Library","url":"/docs/0.16/core/tuple/#first","contents":"Returns the first value in the tuple, or null if the tuple is empty.","keywords":[]},{"title":"tuple.get","module":"Core Library","url":"/docs/0.16/core/tuple/#get","contents":"Gets the Nth value in the tuple. If the tuple doesn't contain a value at that position then the provided default value is returned. If no default value is provided then null is returned.","keywords":[]},{"title":"tuple.is_empty","module":"Core Library","url":"/docs/0.16/core/tuple/#is-empty","contents":"Returns true if the tuple has a size of zero, and false otherwise.","keywords":[]},{"title":"tuple.last","module":"Core Library","url":"/docs/0.16/core/tuple/#last","contents":"Returns the last value in the tuple, or null if the tuple is empty.","keywords":[]},{"title":"tuple.sort_copy","module":"Core Library","url":"/docs/0.16/core/tuple/#sort-copy","contents":"Returns a sorted copy of the tuple. Returns a sorted copy of the tuple, based on the output of calling a key function for each of the tuple's elements. The key function's result is cached, so it's only called once per value.","keywords":[]},{"title":"tuple.to_list","module":"Core Library","url":"/docs/0.16/core/tuple/#to-list","contents":"Returns a copy of the tuple's data as a list.","keywords":[]},{"title":"os","module":"Core Library","url":"/docs/0.16/core/os/#os","contents":"A collection of utilities for working with the operating system.","keywords":[]},{"title":"os.args","module":"Core Library","url":"/docs/0.16/core/os/#args","contents":"Provides access to the arguments that were passed into the script when running the koto CLI application. If no arguments were provided then the list is empty.","keywords":[]},{"title":"os.command","module":"Core Library","url":"/docs/0.16/core/os/#command","contents":"Creates a new Command, which supports executing external programs in separate processes. Builder methods allow configuration of properties like command arguments or environment variables before spawning the program in a new process.","keywords":[]},{"title":"os.name","module":"Core Library","url":"/docs/0.16/core/os/#name","contents":"Returns a string containing the name of the current operating system, e.g. \"linux\", \"macos\", \"windows\", etc.","keywords":[]},{"title":"os.process_id","module":"Core Library","url":"/docs/0.16/core/os/#process-id","contents":"Returns the ID associated with the current process.","keywords":[]},{"title":"os.start_timer","module":"Core Library","url":"/docs/0.16/core/os/#start-timer","contents":"Returns a timer that can be used to measure how much time has passed while a script is running.","keywords":[]},{"title":"os.time","module":"Core Library","url":"/docs/0.16/core/os/#time","contents":"Returns a DateTime set to the current time, using the local timezone. Returns a DateTime set to the provided timestamp in seconds, using the local timezone. Returns a DateTime set to the provided timestamp in seconds, using an offset in seconds.","keywords":[]},{"title":"os.Command","module":"Core Library","url":"/docs/0.16/core/os/#command","contents":"See os.command","keywords":[]},{"title":"os.Command.args","module":"Core Library","url":"/docs/0.16/core/os/#command-args","contents":"Adds the given arguments to the command, and returns the command.","keywords":[]},{"title":"os.Command.current_dir","module":"Core Library","url":"/docs/0.16/core/os/#command-current-dir","contents":"Sets the command's working directory, and returns the command.","keywords":[]},{"title":"os.Command.env","module":"Core Library","url":"/docs/0.16/core/os/#command-env","contents":"Sets an environment variable, and returns the command.","keywords":[]},{"title":"os.Command.env_clear","module":"Core Library","url":"/docs/0.16/core/os/#command-env-clear","contents":"Clears all environment variables for the command, and returns the command. This prevents the command from inheriting any environment variables from the parent process.","keywords":[]},{"title":"os.Command.env_remove","module":"Core Library","url":"/docs/0.16/core/os/#command-env-remove","contents":"Removes the environment variable matching the given key, and returns the command.","keywords":[]},{"title":"os.Command.stdin","module":"Core Library","url":"/docs/0.16/core/os/#command-stdin","contents":"Configures the command's stdin stream. Valid values of stream_config are:inherit: the stream will be inherited from the parent process.piped: a pipe will be created to connect the parent and child processes.null: the stream will be ignored. The default stream behavior is inherit when the command is used with spawn or wait_for_exit, and piped when used with wait_for_output.","keywords":[]},{"title":"os.Command.stdout","module":"Core Library","url":"/docs/0.16/core/os/#command-stdout","contents":"Configures the command's stdout stream. See Command.stdin for valid values of stream_config.","keywords":[]},{"title":"os.Command.stderr","module":"Core Library","url":"/docs/0.16/core/os/#command-stderr","contents":"Configures the command's stderr stream. See Command.stdin for valid values of stream_config.","keywords":[]},{"title":"os.Command.spawn","module":"Core Library","url":"/docs/0.16/core/os/#command-spawn","contents":"Executes the command, returning the command's Child process.","keywords":[]},{"title":"os.Command.wait_for_output","module":"Core Library","url":"/docs/0.16/core/os/#command-wait-for-output","contents":"Executes the command and waits for it to exit, returning its captured output.","keywords":[]},{"title":"os.Command.wait_for_exit","module":"Core Library","url":"/docs/0.16/core/os/#command-wait-for-exit","contents":"Executes the command and waits for it to exit, returning its exit code if the command exited normally, or null if it was interrupted.","keywords":[]},{"title":"os.CommandOutput","module":"Core Library","url":"/docs/0.16/core/os/#commandoutput","contents":"Contains captured output from a command, and information about how the command exited. See Command.wait_for_output and Child.wait_for_output.","keywords":[]},{"title":"os.CommandOutput.exit_code","module":"Core Library","url":"/docs/0.16/core/os/#commandoutput-exit-code","contents":"Returns the command's exit code if available.","keywords":[]},{"title":"os.CommandOutput.success","module":"Core Library","url":"/docs/0.16/core/os/#commandoutput-success","contents":"Returns true if the command exited successfully.","keywords":[]},{"title":"os.CommandOutput.stdout","module":"Core Library","url":"/docs/0.16/core/os/#commandoutput-stdout","contents":"Returns the contents of the command's stdout stream if it contains valid unicode, or null otherwise.CommandOutput.stdout_bytes","keywords":[]},{"title":"os.CommandOutput.stderr","module":"Core Library","url":"/docs/0.16/core/os/#commandoutput-stderr","contents":"Returns the contents of the command's stderr stream if it contains valid unicode, or null otherwise.","keywords":[]},{"title":"os.CommandOutput.stdout_bytes","module":"Core Library","url":"/docs/0.16/core/os/#commandoutput-stdout-bytes","contents":"Returns an iterator that yields the bytes contained in the command's stdout stream.","keywords":[]},{"title":"os.CommandOutput.stderr_bytes","module":"Core Library","url":"/docs/0.16/core/os/#commandoutput-stderr-bytes","contents":"Returns an iterator that yields the bytes contained in the command's stderr stream.","keywords":[]},{"title":"os.Child","module":"Core Library","url":"/docs/0.16/core/os/#child","contents":"A handle to a child process, see Command.spawn.","keywords":[]},{"title":"os.Child.stdin","module":"Core Library","url":"/docs/0.16/core/os/#child-stdin","contents":"Returns the child process's stdin standard input stream as a File that supports write operations.","keywords":[]},{"title":"os.Child.stdout","module":"Core Library","url":"/docs/0.16/core/os/#child-stdout","contents":"Returns the child process's stdout standard output stream as a File that supports read operations. Calling this function will prevent the stream from being included in wait_for_output.","keywords":[]},{"title":"os.Child.stderr","module":"Core Library","url":"/docs/0.16/core/os/#child-stderr","contents":"Returns the child process's stderr standard error stream as a File that supports read operations. Calling this function will prevent the stream from being included in wait_for_output.","keywords":[]},{"title":"os.Child.has_exited","module":"Core Library","url":"/docs/0.16/core/os/#child-has-exited","contents":"Returns true without blocking if the child process has exited, and false otherwise.","keywords":[]},{"title":"os.Child.wait_for_output","module":"Core Library","url":"/docs/0.16/core/os/#child-wait-for-output","contents":"Closes all input and output streams, waits for the command to exit, and then returns the captured output. Note that if the stdout or stderr streams were manually retrieved via Child.stdout/Child.stderr then they won't be included in the captured output.","keywords":[]},{"title":"os.Child.wait_for_exit","module":"Core Library","url":"/docs/0.16/core/os/#child-wait-for-exit","contents":"Closes all input and output streams, waits for the command to exit, and then returns the command's exit code if available.","keywords":[]},{"title":"os.DateTime","module":"Core Library","url":"/docs/0.16/core/os/#datetime","contents":"See os.time.","keywords":[]},{"title":"os.DateTime.year","module":"Core Library","url":"/docs/0.16/core/os/#datetime-year","contents":"Returns the year component of the provided DateTime.","keywords":[]},{"title":"os.DateTime.month","module":"Core Library","url":"/docs/0.16/core/os/#datetime-month","contents":"Returns the month component of the provided DateTime.","keywords":[]},{"title":"os.DateTime.day","module":"Core Library","url":"/docs/0.16/core/os/#datetime-day","contents":"Returns the day component of the provided DateTime.","keywords":[]},{"title":"os.DateTime.hour","module":"Core Library","url":"/docs/0.16/core/os/#datetime-hour","contents":"Returns the hour component of the provided DateTime.","keywords":[]},{"title":"os.DateTime.minute","module":"Core Library","url":"/docs/0.16/core/os/#datetime-minute","contents":"Returns the minute component of the provided DateTime.","keywords":[]},{"title":"os.DateTime.nanosecond","module":"Core Library","url":"/docs/0.16/core/os/#datetime-nanosecond","contents":"Returns the nanosecond component of the provided DateTime.","keywords":[]},{"title":"os.DateTime.timestamp","module":"Core Library","url":"/docs/0.16/core/os/#datetime-timestamp","contents":"Returns the number of seconds since 00:00:00 UTC on January 1st 1970.","keywords":[]},{"title":"os.DateTime.timezone_offset","module":"Core Library","url":"/docs/0.16/core/os/#datetime-timezone-offset","contents":"Returns the DateTime's timezone offset in seconds.","keywords":[]},{"title":"os.DateTime.timestamp_string","module":"Core Library","url":"/docs/0.16/core/os/#datetime-timestamp-string","contents":"Returns a string representing the DateTime's timezone offset in seconds.","keywords":[]},{"title":"os.Timer","module":"Core Library","url":"/docs/0.16/core/os/#timer","contents":"See os.start_timer.","keywords":[]},{"title":"os.Timer.@- (subtract)","module":"Core Library","url":"/docs/0.16/core/os/#timer-subtract","contents":"Returns the time difference in seconds between two timers.","keywords":[]},{"title":"os.Timer.elapsed","module":"Core Library","url":"/docs/0.16/core/os/#timer-elapsed","contents":"Returns the number of seconds that have elapsed since the timer was started.","keywords":[]},{"title":"test","module":"Core Library","url":"/docs/0.16/core/test/#test","contents":"A collection of utilities for writing tests.","keywords":[]},{"title":"test.assert","module":"Core Library","url":"/docs/0.16/core/test/#assert","contents":"Throws a runtime error if the argument if false.","keywords":[]},{"title":"test.assert_eq","module":"Core Library","url":"/docs/0.16/core/test/#assert-eq","contents":"Checks the two input values for equality and throws an error if they're not equal.","keywords":[]},{"title":"test.assert_ne","module":"Core Library","url":"/docs/0.16/core/test/#assert-ne","contents":"Checks the two input values for inequality and throws an error if they're equal.","keywords":[]},{"title":"test.assert_near","module":"Core Library","url":"/docs/0.16/core/test/#assert-near","contents":"Checks that the two input numbers are equal, within an allowed margin of error. This is useful when testing floating-point operations, where the result can be close to a target with some acceptable imprecision. The margin of error is optional, defaulting to 1.0e-12.","keywords":[]},{"title":"test.run_tests","module":"Core Library","url":"/docs/0.16/core/test/#run-tests","contents":"Runs the @test functions contained in the map. @pre_test and @post_test functions can be implemented in the same way as when exporting module tests. @pre_test will be run before each @test, and @post_test will be run after.","keywords":[]},{"title":"io","module":"Core Library","url":"/docs/0.16/core/io/#io","contents":"A collection of utilities for working with the local filesystem.","keywords":[]},{"title":"io.create","module":"Core Library","url":"/docs/0.16/core/io/#create","contents":"Returns an empty File at the provided path. If the file already exists it will be truncated. A runtime error will be thrown if the file can't be created.","keywords":[]},{"title":"io.current_dir","module":"Core Library","url":"/docs/0.16/core/io/#current-dir","contents":"Returns the current working directory as a String, or null if the current directory can't be retrieved.","keywords":[]},{"title":"io.exists","module":"Core Library","url":"/docs/0.16/core/io/#exists","contents":"Returns true if a file exists at the provided path.","keywords":[]},{"title":"io.extend_path","module":"Core Library","url":"/docs/0.16/core/io/#extend-path","contents":"Takes an initial path as a string, and extends it with the provided nodes, inserting a platform-appropriate separator between each node.","keywords":[]},{"title":"io.open","module":"Core Library","url":"/docs/0.16/core/io/#open","contents":"Opens the file at the given path, and returns a corresponding File. An error is thrown if a file can't be opened at the given path.","keywords":[]},{"title":"io.print","module":"Core Library","url":"/docs/0.16/core/io/#print","contents":"Prints a single value to the active output. Prints a series of values to the active output as a tuple.To print formatted strings, see string.format.The output for print depends on the configuration of the runtime. The default output is stdout.","keywords":[]},{"title":"io.read_to_string","module":"Core Library","url":"/docs/0.16/core/io/#read-to-string","contents":"Returns a string containing the contents of the file at the given path. Errors are thrown:if the file doesn't contain valid UTF-8 data.if a file can't be opened at the given path.","keywords":[]},{"title":"io.remove_file","module":"Core Library","url":"/docs/0.16/core/io/#remove-file","contents":"Removes the file at the given path.An error is thrown if a file can't be removed at the given path.","keywords":[]},{"title":"io.stderr","module":"Core Library","url":"/docs/0.16/core/io/#stderr","contents":"Returns the standard error output of the current process as a File.io.stdinio.stdout","keywords":[]},{"title":"io.stdin","module":"Core Library","url":"/docs/0.16/core/io/#stdin","contents":"Returns the standard input of the current process as a File.io.stderrio.stdout","keywords":[]},{"title":"io.stdout","module":"Core Library","url":"/docs/0.16/core/io/#stdout","contents":"Returns the standard output of the current process as a File.io.stderrio.stdin","keywords":[]},{"title":"io.temp_dir","module":"Core Library","url":"/docs/0.16/core/io/#temp-dir","contents":"Returns the path to a temporary directory. This defers to Rust's std::env::temp_dir, for details see its documentation.","keywords":[]},{"title":"io.File","module":"Core Library","url":"/docs/0.16/core/io/#file","contents":"An object that represents a file handle.","keywords":[]},{"title":"io.File.flush","module":"Core Library","url":"/docs/0.16/core/io/#file-flush","contents":"Ensures that any buffered changes to the file have been written.file.writefile.write_line","keywords":[]},{"title":"io.File.is_terminal","module":"Core Library","url":"/docs/0.16/core/io/#file-is-terminal","contents":"Returns true if the file refers to a terminal/tty.","keywords":[]},{"title":"io.File.path","module":"Core Library","url":"/docs/0.16/core/io/#file-path","contents":"Returns the file's path.","keywords":[]},{"title":"io.File.read_line","module":"Core Library","url":"/docs/0.16/core/io/#file-read-line","contents":"Reads a line of output from the file as a string, not including the newline. When the end of the file is reached, null will be returned. An error is thrown if the line doesn't contain valid UTF-8 data.","keywords":[]},{"title":"io.File.read_to_string","module":"Core Library","url":"/docs/0.16/core/io/#file-read-to-string","contents":"Reads the file's contents to a string. An error is thrown if the file doesn't contain valid UTF-8 data.","keywords":[]},{"title":"io.File.seek","module":"Core Library","url":"/docs/0.16/core/io/#file-seek","contents":"Seeks within the file to the specified position in bytes.","keywords":[]},{"title":"io.File.write","module":"Core Library","url":"/docs/0.16/core/io/#file-write","contents":"Writes the formatted value as a string to the file.","keywords":[]},{"title":"io.File.write_line","module":"Core Library","url":"/docs/0.16/core/io/#file-write-line","contents":"Writes the formatted value as a string, with a newline, to the file.","keywords":[]},{"title":"range.contains","module":"Core Library","url":"/docs/0.16/core/range/#contains","contents":"Returns true if the provided number is within the range, and false otherwise. Returns true if the provided range is entirely contained within the range, and false otherwise.","keywords":[]},{"title":"range.end","module":"Core Library","url":"/docs/0.16/core/range/#end","contents":"Returns the end value of the range.start","keywords":[]},{"title":"range.expanded","module":"Core Library","url":"/docs/0.16/core/range/#expanded","contents":"Returns a copy of the input range which has been 'expanded' in both directions by the provided amount. For an ascending range this will mean that start will decrease by the provided amount, while end will increase. Negative amounts will cause the range to shrink rather than grow.","keywords":[]},{"title":"range.intersection","module":"Core Library","url":"/docs/0.16/core/range/#intersection","contents":"Returns a range representing the intersecting region of the two input ranges. If there is no intersecting region then null is returned.","keywords":[]},{"title":"range.is_inclusive","module":"Core Library","url":"/docs/0.16/core/range/#is-inclusive","contents":"Returns true if the range has a defined end which is inclusive.","keywords":[]},{"title":"range.start","module":"Core Library","url":"/docs/0.16/core/range/#start","contents":"Returns the start value of the range.end","keywords":[]},{"title":"range.union","module":"Core Library","url":"/docs/0.16/core/range/#union","contents":"Returns the union of the range and a provided number. If the number falls outside of the range then the resulting range will be expanded to include the number. Returns the union of two ranges. The resulting range will encompass all values that are contained in the two ranges, and any values that lie between them.","keywords":[]},{"title":"number.abs","module":"Core Library","url":"/docs/0.16/core/number/#abs","contents":"Returns the absolute value of the number.","keywords":[]},{"title":"number.acos","module":"Core Library","url":"/docs/0.16/core/number/#acos","contents":"Returns the arc cosine of the number. acos is the inverse function of cos.","keywords":[]},{"title":"number.acosh","module":"Core Library","url":"/docs/0.16/core/number/#acosh","contents":"Returns the inverse hyperbolic cosine of the number.","keywords":[]},{"title":"number.and","module":"Core Library","url":"/docs/0.16/core/number/#and","contents":"Returns the bitwise combination of the binary representations of two numbers, where a 1 in both of the inputs produces a 1 in the corresponding output position. If either input is a float then its integer part will be used.","keywords":[]},{"title":"number.asin","module":"Core Library","url":"/docs/0.16/core/number/#asin","contents":"Returns the arc sine of the number. asin is the inverse function of sin.","keywords":[]},{"title":"number.asinh","module":"Core Library","url":"/docs/0.16/core/number/#asinh","contents":"Returns the inverse hyperbolic sine of the number.","keywords":[]},{"title":"number.atan","module":"Core Library","url":"/docs/0.16/core/number/#atan","contents":"Returns the arc tangent of the number. atan is the inverse function of tan.","keywords":[]},{"title":"number.atanh","module":"Core Library","url":"/docs/0.16/core/number/#atanh","contents":"Returns the inverse hyperbolic tangent of the number.","keywords":[]},{"title":"number.atan2","module":"Core Library","url":"/docs/0.16/core/number/#atan2","contents":"Returns the arc tangent of y and x in radians, using the signs of y and x to determine the correct quadrant.","keywords":[]},{"title":"number.ceil","module":"Core Library","url":"/docs/0.16/core/number/#ceil","contents":"Returns the integer that's greater than or equal to the input.number.floornumber.roundnumber.to_int","keywords":[]},{"title":"number.clamp","module":"Core Library","url":"/docs/0.16/core/number/#clamp","contents":"Returns the input number restricted to the range defined by min and max.","keywords":[]},{"title":"number.cos","module":"Core Library","url":"/docs/0.16/core/number/#cos","contents":"Returns the cosine of the number.","keywords":[]},{"title":"number.cosh","module":"Core Library","url":"/docs/0.16/core/number/#cosh","contents":"Returns the hyperbolic cosine of the number.","keywords":[]},{"title":"number.degrees","module":"Core Library","url":"/docs/0.16/core/number/#degrees","contents":"Converts radians into degrees.","keywords":[]},{"title":"number.e","module":"Core Library","url":"/docs/0.16/core/number/#e","contents":"Provides the e constant.","keywords":[]},{"title":"number.exp","module":"Core Library","url":"/docs/0.16/core/number/#exp","contents":"Returns the result of applying the exponential function, equivalent to calling e ^ x.","keywords":[]},{"title":"number.exp2","module":"Core Library","url":"/docs/0.16/core/number/#exp2","contents":"Returns the result of applying the base-2 exponential function, equivalent to calling 2 ^ x.","keywords":[]},{"title":"number.flip_bits","module":"Core Library","url":"/docs/0.16/core/number/#flip-bits","contents":"Returns the input with its bits 'flipped', i.e. 1 => 0, and 0 => 1.","keywords":[]},{"title":"number.floor","module":"Core Library","url":"/docs/0.16/core/number/#floor","contents":"Returns the integer that's less than or equal to the input.number.ceilnumber.roundnumber.to_int","keywords":[]},{"title":"number.infinity","module":"Core Library","url":"/docs/0.16/core/number/#infinity","contents":"Provides the ∞ constant.","keywords":[]},{"title":"number.is_int","module":"Core Library","url":"/docs/0.16/core/number/#is-int","contents":"Returns true if the number is an integer.number.is_nannumber.to_int","keywords":[]},{"title":"number.is_nan","module":"Core Library","url":"/docs/0.16/core/number/#is-nan","contents":"Returns true if the number is NaN.number.is_int","keywords":[]},{"title":"number.lerp","module":"Core Library","url":"/docs/0.16/core/number/#lerp","contents":"Linearly interpolates between a and b using the interpolation factor t. The range (a -> b) corresponds to the value range of (0 -> 1) for t. e.g.At t == 0, the result is equal to a.At t == 1, the result is equal to b.At other values of t, the result is a proportional mix of a and b.Values for t outside of (0 -> 1) will extrapolate from the (a -> b) range.","keywords":[]},{"title":"number.ln","module":"Core Library","url":"/docs/0.16/core/number/#ln","contents":"Returns the natural logarithm of the number.","keywords":[]},{"title":"number.log2","module":"Core Library","url":"/docs/0.16/core/number/#log2","contents":"Returns the base-2 logarithm of the number.","keywords":[]},{"title":"number.log10","module":"Core Library","url":"/docs/0.16/core/number/#log10","contents":"Returns the base-10 logarithm of the number.","keywords":[]},{"title":"number.max","module":"Core Library","url":"/docs/0.16/core/number/#max","contents":"Returns the larger of the two numbers.","keywords":[]},{"title":"number.min","module":"Core Library","url":"/docs/0.16/core/number/#min","contents":"Returns the smaller of the two numbers.","keywords":[]},{"title":"number.nan","module":"Core Library","url":"/docs/0.16/core/number/#nan","contents":"Provides the NaN (Not a Number) constant.","keywords":[]},{"title":"number.negative_infinity","module":"Core Library","url":"/docs/0.16/core/number/#negative-infinity","contents":"Provides the -∞ constant.","keywords":[]},{"title":"number.or","module":"Core Library","url":"/docs/0.16/core/number/#or","contents":"Returns the bitwise combination of the binary representations of two numbers, where a 1 in either of the inputs produces a 1 in the corresponding output position. If either input is a float then its integer part will be used.","keywords":[]},{"title":"number.pi","module":"Core Library","url":"/docs/0.16/core/number/#pi","contents":"Provides the π constant.","keywords":[]},{"title":"number.pi_2","module":"Core Library","url":"/docs/0.16/core/number/#pi-2","contents":"Provides the π constant divided by 2.","keywords":[]},{"title":"number.pi_4","module":"Core Library","url":"/docs/0.16/core/number/#pi-4","contents":"Provides the π constant divided by 4.","keywords":[]},{"title":"number.radians","module":"Core Library","url":"/docs/0.16/core/number/#radians","contents":"Converts degrees into radians.","keywords":[]},{"title":"number.recip","module":"Core Library","url":"/docs/0.16/core/number/#recip","contents":"Returns the reciprocal of the number, i.e. 1 / x.","keywords":[]},{"title":"number.round","module":"Core Library","url":"/docs/0.16/core/number/#round","contents":"Returns the nearest integer to the input number. Half-way values round away from zero.number.ceilnumber.floornumber.to_int","keywords":[]},{"title":"number.shift_left","module":"Core Library","url":"/docs/0.16/core/number/#shift-left","contents":"Returns the result of shifting the bits of the first number to the left by the amount specified by the second number. If either input is a float then its integer part will be used. The shift amount must be greater than or equal to 0.","keywords":[]},{"title":"number.shift_right","module":"Core Library","url":"/docs/0.16/core/number/#shift-right","contents":"Returns the result of shifting the bits of the first number to the right by the amount specified by the second number. If either input is a float then its integer part will be used. The shift amount must be greater than or equal to 0.","keywords":[]},{"title":"number.sin","module":"Core Library","url":"/docs/0.16/core/number/#sin","contents":"Returns the sine of the number.","keywords":[]},{"title":"number.sinh","module":"Core Library","url":"/docs/0.16/core/number/#sinh","contents":"Returns the hyperbolic sine of the number.","keywords":[]},{"title":"number.sqrt","module":"Core Library","url":"/docs/0.16/core/number/#sqrt","contents":"Returns the square root of the number.","keywords":[]},{"title":"number.tan","module":"Core Library","url":"/docs/0.16/core/number/#tan","contents":"Returns the tangent of the number.","keywords":[]},{"title":"number.tanh","module":"Core Library","url":"/docs/0.16/core/number/#tanh","contents":"Returns the hyperbolic tangent of the number.","keywords":[]},{"title":"number.tau","module":"Core Library","url":"/docs/0.16/core/number/#tau","contents":"Provides the τ constant, equivalent to 2π.","keywords":[]},{"title":"number.to_int","module":"Core Library","url":"/docs/0.16/core/number/#to-int","contents":"Returns the integer part of the input number. This is often called trunc in other languages.number.ceilnumber.floornumber.is_intnumber.round","keywords":[]},{"title":"number.xor","module":"Core Library","url":"/docs/0.16/core/number/#xor","contents":"Returns the bitwise combination of the binary representations of two numbers, where a 1 in one (and only one) of the input positions produces a 1 in the corresponding output position. If either input is a float then its integer part will be used.","keywords":[]},{"title":"geometry","module":"Extra Libs","url":"/docs/0.16/libs/geometry/#geometry","contents":"Utilities for working with geometry in Koto. The module contains the Vec2, Vec3, and Rect types.","keywords":[]},{"title":"geometry.rect","module":"Extra Libs","url":"/docs/0.16/libs/geometry/#rect","contents":"Initializes a default Rect with each component set to 0. Initializes a Rect with corresponding position and size.","keywords":[]},{"title":"geometry.vec2","module":"Extra Libs","url":"/docs/0.16/libs/geometry/#vec2","contents":"Initializes a default Vec2 with each component set to 0. Initializes a Vec2 with x specified, and y set to 0. Initializes a Vec2 with corresponding x and y components.","keywords":[]},{"title":"geometry.vec3","module":"Extra Libs","url":"/docs/0.16/libs/geometry/#vec3","contents":"Initializes a default Vec3 with each component set to 0. Initializes a Vec3 with x specified, and all other components set to 0. Initializes a Vec3 with x and y specified, and z set to 0. Initializes a Vec3 with specified x, y, and z components.","keywords":[]},{"title":"geometry.Rect","module":"Extra Libs","url":"/docs/0.16/libs/geometry/#rect","contents":"The Rect type represents a 2-dimensional rectangle, with a defined position and size. The position is interpreted as being at the center of the rectangle. Comparison operations are available, and the rect's components are iterable.","keywords":[]},{"title":"geometry.Rect.left","module":"Extra Libs","url":"/docs/0.16/libs/geometry/#rect-left","contents":"Returns the position of rectangle's left edge.","keywords":[]},{"title":"geometry.Rect.right","module":"Extra Libs","url":"/docs/0.16/libs/geometry/#rect-right","contents":"Returns the position of rectangle's right edge.","keywords":[]},{"title":"geometry.Rect.top","module":"Extra Libs","url":"/docs/0.16/libs/geometry/#rect-top","contents":"Returns the position of rectangle's top edge.","keywords":[]},{"title":"geometry.Rect.bottom","module":"Extra Libs","url":"/docs/0.16/libs/geometry/#rect-bottom","contents":"Returns the position of rectangle's bottom edge.","keywords":[]},{"title":"geometry.Rect.width","module":"Extra Libs","url":"/docs/0.16/libs/geometry/#rect-width","contents":"Returns the width of the rectangle.","keywords":[]},{"title":"geometry.Rect.height","module":"Extra Libs","url":"/docs/0.16/libs/geometry/#rect-height","contents":"Returns the width of the rectangle.","keywords":[]},{"title":"geometry.Rect.center","module":"Extra Libs","url":"/docs/0.16/libs/geometry/#rect-center","contents":"Returns the center point of the rectangle.","keywords":[]},{"title":"geometry.Rect.x","module":"Extra Libs","url":"/docs/0.16/libs/geometry/#rect-x","contents":"Returns the x component of the rectangle's center point.","keywords":[]},{"title":"geometry.Rect.y","module":"Extra Libs","url":"/docs/0.16/libs/geometry/#rect-y","contents":"Returns the y component of the rectangle's center point.","keywords":[]},{"title":"geometry.Rect.contains","module":"Extra Libs","url":"/docs/0.16/libs/geometry/#rect-contains","contents":"Returns true if the given Vec2 is located within the rectangle's bounds.","keywords":[]},{"title":"geometry.Rect.set_center","module":"Extra Libs","url":"/docs/0.16/libs/geometry/#rect-set-center","contents":"Sets the rect's center position to the given x and y coordinates, and returns the rect.","keywords":[]},{"title":"geometry.Vec2","module":"Extra Libs","url":"/docs/0.16/libs/geometry/#vec2","contents":"The Vec2 type represents a 2-dimensional vector, with x and y coordinates. Arithmetic operations are supported, and the vector's coordinates are iterable.","keywords":[]},{"title":"geometry.Vec2.angle","module":"Extra Libs","url":"/docs/0.16/libs/geometry/#vec2-angle","contents":"Returns the angle of the vector, expressed in radians.","keywords":[]},{"title":"geometry.Vec2.length","module":"Extra Libs","url":"/docs/0.16/libs/geometry/#vec2-length","contents":"Returns the length of the vector.","keywords":[]},{"title":"geometry.Vec2.x","module":"Extra Libs","url":"/docs/0.16/libs/geometry/#vec2-x","contents":"Returns the x coordinate of the vector.","keywords":[]},{"title":"geometry.Vec2.y","module":"Extra Libs","url":"/docs/0.16/libs/geometry/#vec2-y","contents":"Returns the y coordinate of the vector.","keywords":[]},{"title":"geometry.Vec3","module":"Extra Libs","url":"/docs/0.16/libs/geometry/#vec3","contents":"The Vec3 type represents a 3-dimensional vector, with x, y, and z coordinates. Arithmetic operations are supported, and the vector's coordinates are iterable.","keywords":[]},{"title":"geometry.Vec3.x","module":"Extra Libs","url":"/docs/0.16/libs/geometry/#vec3-x","contents":"Returns the x coordinate of the vector.","keywords":[]},{"title":"geometry.Vec3.y","module":"Extra Libs","url":"/docs/0.16/libs/geometry/#vec3-y","contents":"Returns the y coordinate of the vector.","keywords":[]},{"title":"geometry.Vec3.z","module":"Extra Libs","url":"/docs/0.16/libs/geometry/#vec3-z","contents":"Returns the z coordinate of the vector.","keywords":[]},{"title":"geometry.Vec3.length","module":"Extra Libs","url":"/docs/0.16/libs/geometry/#vec3-length","contents":"Returns the length of the vector.","keywords":[]},{"title":"yaml","module":"Extra Libs","url":"/docs/0.16/libs/yaml/#yaml","contents":"YAML support for Koto.","keywords":[]},{"title":"yaml.from_string","module":"Extra Libs","url":"/docs/0.16/libs/yaml/#from-string","contents":"Deserializes a string containing YAML data, returning a structured Koto value.","keywords":[]},{"title":"yaml.to_string","module":"Extra Libs","url":"/docs/0.16/libs/yaml/#to-string","contents":"Returns a string containing the input value serialized as YAML data.","keywords":[]},{"title":"regex","module":"Extra Libs","url":"/docs/0.16/libs/regex/#regex","contents":"Regular expression utilities for Koto.","keywords":[]},{"title":"regex.new","module":"Extra Libs","url":"/docs/0.16/libs/regex/#new","contents":"Creates a new Regex from the given string.","keywords":[]},{"title":"regex.Regex","module":"Extra Libs","url":"/docs/0.16/libs/regex/#regex","contents":"The core regular expression type used by the regex module. The regex module is a wrapper for the regex crate, please see its documentation for more information, including a guide to the supported syntax.","keywords":[]},{"title":"regex.Regex.is_match","module":"Extra Libs","url":"/docs/0.16/libs/regex/#regex-is-match","contents":"Returns true if the given input string matches against the regular expression.","keywords":[]},{"title":"regex.Regex.find","module":"Extra Libs","url":"/docs/0.16/libs/regex/#regex-find","contents":"If the given input string matches the regular expression, then an instance of Match is returned that allows the first matched region in the string to be inspected. If no matches are found then null is returned.","keywords":[]},{"title":"regex.Regex.find_all","module":"Extra Libs","url":"/docs/0.16/libs/regex/#regex-find-all","contents":"If the given input string matches the regular expression, then an instance of Matches is returned that allows all matches in the input to be inspected. If no matches are found then null is returned.","keywords":[]},{"title":"regex.Regex.captures","module":"Extra Libs","url":"/docs/0.16/libs/regex/#regex-captures","contents":"If the given string matches the regular expression, then a map is returned containing the first match found, along with matches for any capture groups. If no matches are found then null is returned. Captured groups are entered in the map with their indices as the key, and if the group is named then it's also inserted with the name. The first entry in the map (index 0) contains the entire match, with subsequent captures starting at index 1.","keywords":[]},{"title":"regex.Regex.replace_all","module":"Extra Libs","url":"/docs/0.16/libs/regex/#regex-replace-all","contents":"Returns a string with each match in the input replaced using rules defined in the replacement string.","keywords":[]},{"title":"regex.Matches","module":"Extra Libs","url":"/docs/0.16/libs/regex/#matches","contents":"Matches is an iterator that outputs a Match for each match resulting from a call to Regex.find_all.","keywords":[]},{"title":"regex.Match","module":"Extra Libs","url":"/docs/0.16/libs/regex/#match","contents":"Match is a type produced from calls to search functions like Regex.find or Regex.captures that provides access to the matched region of the input string, along with the matched region's indices.","keywords":[]},{"title":"regex.Match.text","module":"Extra Libs","url":"/docs/0.16/libs/regex/#match-text","contents":"Returns the matched region of the input string.","keywords":[]},{"title":"regex.Match.range","module":"Extra Libs","url":"/docs/0.16/libs/regex/#match-range","contents":"Returns the indices of the matched region in the input string.","keywords":[]},{"title":"json","module":"Extra Libs","url":"/docs/0.16/libs/json/#json","contents":"JSON support for Koto.","keywords":[]},{"title":"json.from_string","module":"Extra Libs","url":"/docs/0.16/libs/json/#from-string","contents":"Deserializes a string containing JSON data, returning a structured Koto value.","keywords":[]},{"title":"json.to_string","module":"Extra Libs","url":"/docs/0.16/libs/json/#to-string","contents":"Returns a string containing the input value serialized as JSON data.","keywords":[]},{"title":"toml","module":"Extra Libs","url":"/docs/0.16/libs/toml/#toml","contents":"TOML support for Koto.","keywords":[]},{"title":"toml.from_string","module":"Extra Libs","url":"/docs/0.16/libs/toml/#from-string","contents":"Deserializes a string containing TOML data, returning a structured Koto value.","keywords":[]},{"title":"toml.to_string","module":"Extra Libs","url":"/docs/0.16/libs/toml/#to-string","contents":"Returns a string containing the input value serialized as TOML data.","keywords":[]},{"title":"color","module":"Extra Libs","url":"/docs/0.16/libs/color/#color","contents":"Utilities for working with color in Koto. At the core of the library is the Color type, with various initializers available. For convenience, the color module itself is callable as a shorthand for some standard initializers: Equivalent to calling color.named, or color.hex if no matching name is found. Equivalent to calling color.hex with a number. Equivalent to calling color.rgb. Example:","keywords":[]},{"title":"color.hex","module":"Extra Libs","url":"/docs/0.16/libs/color/#hex","contents":"Creates a color from the given hex triplet string, e.g. '#7fee80'. The # prefix is optional, and the 3 digit shorthand version (e.g. '#7e8') can also be used. If the string can't be parsed as a hex triplet then null will be returned.","keywords":[]},{"title":"color.hsl","module":"Extra Libs","url":"/docs/0.16/libs/color/#hsl","contents":"Returns a color produced from hue, saturation, lightness, and optional alpha components. The hue component is specified in degrees. The saturation, lightness, and alpha components are specified as numbers between 0 and 1.","keywords":[]},{"title":"color.hsv","module":"Extra Libs","url":"/docs/0.16/libs/color/#hsv","contents":"Returns a color produced from hue, saturation, value, and optional alpha components. The hue component is specified in degrees. The saturation, value, and alpha components are specified as numbers between 0 and 1.","keywords":[]},{"title":"color.named","module":"Extra Libs","url":"/docs/0.16/libs/color/#named","contents":"Returns a color corresponding to one of the named colors listed in the SVG color keywords specification. If no name is found then null will be returned.","keywords":[]},{"title":"color.oklab","module":"Extra Libs","url":"/docs/0.16/libs/color/#oklab","contents":"Returns a color produced from lightness, a, b, and optional alpha components, using the Oklab color space. The lightness and alpha components are specified as numbers between 0 and 1. The a (green/red) and b (blue/yellow) components are numbers with values typically between -0.4 and 0.4.","keywords":[]},{"title":"color.oklch","module":"Extra Libs","url":"/docs/0.16/libs/color/#oklch","contents":"Returns a color produced from lightness, chroma, hue, and optional alpha components, using the Oklab color space. The lightness and alpha components are specified as numbers between 0 and 1. The hue component is specified in degrees. The chroma component is a number between 0 and a maximum that depends on the hue and lightness components.","keywords":[]},{"title":"color.rgb","module":"Extra Libs","url":"/docs/0.16/libs/color/#rgb","contents":"Returns a color produced from red, green, blue, and optional alpha components, using the sRGB color space. The color components are specified as numbers between 0 and 1.","keywords":[]},{"title":"color.Color","module":"Extra Libs","url":"/docs/0.16/libs/color/#color","contents":"The color module's core color type. The color may belong to various different color spaces, with the space's components available via iteration or indexing. The color's alpha value is always present as the color's fourth component. The color space's components can be modified via index, and the alpha component can also be modified via .set_alpha.","keywords":[]},{"title":"color.Color.alpha","module":"Extra Libs","url":"/docs/0.16/libs/color/#color-alpha","contents":"Returns the color's alpha value.","keywords":[]},{"title":"color.Color.set_alpha","module":"Extra Libs","url":"/docs/0.16/libs/color/#color-set-alpha","contents":"Sets the color's alpha component to the given value, and returns the color.","keywords":[]},{"title":"color.Color.mix","module":"Extra Libs","url":"/docs/0.16/libs/color/#color-mix","contents":"Returns a new color representing an even mix of the two input colors. An error is thrown if the colors do not belong to the same color space. Returns a new color representing a weighted mix of the two input colors. The weight argument is a number between 0 and 1, with values closer to 0 producing results closer to the first color, and values closer to 1 producing results closer to the second color. An error is thrown if the colors do not belong to the same color space.","keywords":[]},{"title":"color.Color.to_hsl","module":"Extra Libs","url":"/docs/0.16/libs/color/#color-to-hsl","contents":"Returns a new color with the input converted into the HSL color space.","keywords":[]},{"title":"color.Color.to_hsv","module":"Extra Libs","url":"/docs/0.16/libs/color/#color-to-hsv","contents":"Returns a new color with the input converted into the HSV color space.","keywords":[]},{"title":"color.Color.to_oklab","module":"Extra Libs","url":"/docs/0.16/libs/color/#color-to-oklab","contents":"Returns a new color with the input converted into the Oklab color space.","keywords":[]},{"title":"color.Color.to_oklch","module":"Extra Libs","url":"/docs/0.16/libs/color/#color-to-oklch","contents":"Returns a new color with the input converted into the Oklch color space.","keywords":[]},{"title":"color.Color.to_rgb","module":"Extra Libs","url":"/docs/0.16/libs/color/#color-to-rgb","contents":"Returns a new color with the input converted into the sRGB color space.","keywords":[]},{"title":"tempfile","module":"Extra Libs","url":"/docs/0.16/libs/tempfile/#tempfile","contents":"Utilities for working with temporary files in Koto.","keywords":[]},{"title":"tempfile.temp_file","module":"Extra Libs","url":"/docs/0.16/libs/tempfile/#temp-file","contents":"Creates and returns a temporary file. This is a wrapper for NamedTempFile from the tempfile crate, please refer to the documentation for more information.","keywords":[]},{"title":"random","module":"Extra Libs","url":"/docs/0.16/libs/random/#random","contents":"Utilities for generating random values in Koto. At the core of the module is the Rng type, which is a seedable random number generator. Each thread has access to a generator with a randomly selected seed, or unique generators can be created with random.generator. The xoshiro256++ algorithm is used to generate random values, which is fast and portable, but not cryptographically secure.","keywords":["not"]},{"title":"random.bool","module":"Extra Libs","url":"/docs/0.16/libs/random/#bool","contents":"Generates a random boolean using the current thread's generator.","keywords":[]},{"title":"random.generator","module":"Extra Libs","url":"/docs/0.16/libs/random/#generator","contents":"Creates an Rng with a randomly generated seed. Creates an Rng with a specified seed.","keywords":[]},{"title":"random.number","module":"Extra Libs","url":"/docs/0.16/libs/random/#number","contents":"Generates a random number using the current thread's generator. The number will be a floating point value in the range from 0 up to but not including 1.","keywords":[]},{"title":"random.pick","module":"Extra Libs","url":"/docs/0.16/libs/random/#pick","contents":"Selects a random value from the input using the current thread's generator.If the input is empty, then null will be returned.If the input is a map, then a tuple containing the key and value of a randomly selected entry will be returned.If the input is a range, then the result will be an integer within the given range.If the input is some other indexable type (like a list or tuple), then a randomly selected element from the input will be returned.","keywords":[]},{"title":"random.seed","module":"Extra Libs","url":"/docs/0.16/libs/random/#seed","contents":"Seeds the current thread's generator so that it produces predictable results.","keywords":[]},{"title":"random.shuffle","module":"Extra Libs","url":"/docs/0.16/libs/random/#shuffle","contents":"Reorders the entries in a container so that they have a new randomly shuffled order, and returns the container.","keywords":[]},{"title":"random.Rng","module":"Extra Libs","url":"/docs/0.16/libs/random/#rng","contents":"Rng is the random module's core random generator. The xoshiro256++ algorithm is used to generate random values, which is fast and portable, but not cryptographically secure.","keywords":["not cryptographically secure"]},{"title":"random.Rng.bool","module":"Extra Libs","url":"/docs/0.16/libs/random/#rng-bool","contents":"See random.bool.","keywords":[]},{"title":"random.Rng.number","module":"Extra Libs","url":"/docs/0.16/libs/random/#rng-number","contents":"See random.number.","keywords":[]},{"title":"random.Rng.pick","module":"Extra Libs","url":"/docs/0.16/libs/random/#rng-pick","contents":"See random.pick.","keywords":[]},{"title":"random.Rng.shuffle","module":"Extra Libs","url":"/docs/0.16/libs/random/#rng-shuffle","contents":"See random.shuffle.","keywords":[]},{"title":"random.Rng.seed","module":"Extra Libs","url":"/docs/0.16/libs/random/#rng-seed","contents":"See random.seed.","keywords":[]}]